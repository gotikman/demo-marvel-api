{"version":3,"sources":["resources/img/mjolnir.png","components/randomChar/RandomChar.js","components/charList/CharList.js","components/charInfo/CharInfo.js","components/charSearchForm/CharSearchForm.js","components/errorBoundary/ErrorBoundary.js","resources/img/vision.png","components/pages/MainPage.js","components/errorMassage/error.gif","components/errorMassage/ErrorMessage.js","services/MarvelService.js","hooks/http.hook.js","components/skeleton/Skeleton.js","utils/setContent.js"],"names":["View","data","name","description","thumbnail","homepage","wiki","checkCover","search","objectFit","className","src","alt","style","href","RandomChar","useState","char","setChar","useMarvelService","getCharacter","clearError","process","setProcess","useEffect","updateChar","timirId","setInterval","clearInterval","onCharLoaded","id","Math","floor","random","then","setContent","onClick","mjolnir","CharList","props","charList","setCharList","newItemLoading","setNewItemLoading","offset","setOffset","charEnded","setCharEnded","getAllCharacters","onRequest","initial","onCharListLoaded","newcharList","ended","length","itemRefs","useRef","focusOnItem","current","forEach","item","classList","remove","add","focus","elements","useMemo","Component","Spinner","ErrorMessage","Error","arr","items","map","i","CSSTransition","timeout","classNames","tabIndex","ref","el","onCharSelected","key","onKeyPress","e","TransitionGroup","component","renderItems","disabled","protoTypes","PropTypes","func","isRequired","comics","CharInfo","charId","CharSearchForm","getCharacterByName","errorMessage","results","to","initialValues","charName","validationSchema","Yup","required","onSubmit","htmlFor","type","placeholder","ErrorBoundary","state","error","errorInfo","console","log","this","setState","children","MainPage","selectedChar","Helmet","content","decoration","img","display","width","height","margin","request","useCallback","url","a","method","body","headers","fetch","response","ok","status","json","useHttp","_apiBase","_apiKey","res","_transformCharacter","slice","path","extension","urls","getAllComics","_transformComics","getComic","title","pageCount","language","textObjects","price","prices","Skeleton"],"mappings":"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","file":"static/js/6.f815a1d2.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/mjolnir.61f31e18.png\";","import { useState, useEffect } from \"react\";\nimport useMarvelService from \"../../services/MarvelService\";\nimport setContent from '../../utils/setContent';\n\nimport './randomChar.scss';\nimport mjolnir from '../../resources/img/mjolnir.png';\n\nconst RandomChar = () => {\n\n    const [char, setChar] = useState(null);\n    const { getCharacter, clearError, process, setProcess } = useMarvelService();\n\n    useEffect(() => {\n        updateChar();\n        const timirId = setInterval(updateChar, 10000)\n\n        return () => {\n            clearInterval(timirId)\n        }\n\n        //  eslint-disable-next-line\n    }, [])\n\n    const onCharLoaded = (char) => {          //! відповідає за кінцевий результат\n        setChar(char);\n    }\n\n\n    const updateChar = () => {\n        clearError();\n        const id = Math.floor(Math.random() * (1011400 - 1011000) + 1011000);\n        getCharacter(id)\n            .then(onCharLoaded)\n            .then(() => setProcess('confirmed'))\n    }\n\n\n    return (\n        <div className=\"randomchar\">\n\n            {setContent(process, View, char)}\n\n            <div className=\"randomchar__static\">\n                <p className=\"randomchar__title\">\n                    Random character for today!<br />\n                    Do you want to get to know him better?\n                </p>\n                <p className=\"randomchar__title\">\n                    Or choose another one\n                </p>\n                <button className=\"button button__main\"\n                    onClick={updateChar}>\n                    <div className=\"inner\">try it</div>\n                </button>\n                <img src={mjolnir} alt=\"mjolnir\" className=\"randomchar__decoration\" />\n            </div>\n        </div>\n    )\n\n}\n\nconst View = ({ data }) => {\n    const { name, description, thumbnail, homepage, wiki } = data;\n\n    const checkCover = thumbnail.search('not_available') > 0 ? { objectFit: 'contain' } : null;\n\n    return (\n        <div className=\"randomchar__block\">\n            <img src={thumbnail} alt=\"Random character\" className=\"randomchar__img\"\n                style={checkCover} />\n            <div className=\"randomchar__info\">\n                <p className=\"randomchar__name\">{name}</p>\n                <p className=\"randomchar__descr\">{description}\n                </p>\n                <div className=\"randomchar__btns\">\n                    <a href={homepage} className=\"button button__main\">\n                        <div className=\"inner\">homepage</div>\n                    </a>\n                    <a href={wiki} className=\"button button__secondary\">\n                        <div className=\"inner\">Wiki</div>\n                    </a>\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default RandomChar;\n\n","import { useState, useEffect, useRef, useMemo } from 'react';\nimport PropTypes from 'prop-types';\nimport { CSSTransition, TransitionGroup } from 'react-transition-group'\n\nimport Spinner from '../spinner/Spinner';\nimport ErrorMessage from '../errorMassage/ErrorMessage';\nimport useMarvelService from '../../services/MarvelService';\n\nimport './charList.scss';\n\nconst setContent = (process, Component, newItemLoading) => {\n    switch (process) {\n        case 'waiting':\n            return <Spinner />;\n        // break;\n        case 'loading':\n            return newItemLoading ? <Component /> : <Spinner />;\n        // break;\n        case 'confirmed':\n            return <Component />;\n        // break;\n        case 'error':\n            return <ErrorMessage />;\n        // break;\n        default:\n            throw new Error('Unexpected process state');\n    }\n}\n\nconst CharList = (props) => {\n\n    const [charList, setCharList] = useState([]);\n    const [newItemLoading, setNewItemLoading] = useState(false);\n    const [offset, setOffset] = useState(210);                      // 1539 тестування останніх\n    const [charEnded, setCharEnded] = useState(false);\n\n    const { getAllCharacters, process, setProcess } = useMarvelService();  //!\n\n    useEffect(() => {\n        onRequest(offset, true);                          // викликаєм без значення, в сервісі підставиться дефолтний\n        // eslint-disable-next-line\n    }, [])                                                // [] - запускаєм 1 раз\n\n    const onRequest = (offset, initial) => {              // загрузка і дозагрузка персонажів\n        initial ? setNewItemLoading(false) : setNewItemLoading(true);\n        getAllCharacters(offset)\n            .then(onCharListLoaded)\n            .then(() => setProcess('confirmed'));\n    }\n\n\n    const onCharListLoaded = (newcharList) => {\n\n        let ended = false;\n        if (newcharList.length < 9) {\n            ended = true;\n        }\n\n        setCharList(charList => [...charList, ...newcharList]);  //? розгортаєм старі і дозагружені персонажі\n\n        setNewItemLoading(newItemLoading => false);              // включаєм кнопку після дозагрузки \n        setOffset(offset => offset + 9);                         //? зміщуєм діапазон дозагрузки персонажів   \n        setCharEnded(charEnded => ended)\n    }\n\n\n    //! Створюю масив для Ref і функцію для добавлення call-back ref\n    const itemRefs = useRef([]);\n\n    const focusOnItem = (id) => {\n        itemRefs.current.forEach(item => item.classList.remove('char__item_selected'));\n        itemRefs.current[id].classList.add('char__item_selected');\n        itemRefs.current[id].focus();\n    }\n\n\n    function renderItems(arr) {\n        const items = arr.map((item, i) => {\n            const checkCover = item.thumbnail.search('not_available') > 0 ? { objectFit: 'unset' } : null;\n\n            return (\n                <CSSTransition key={item.key} timeout={500} classNames=\"char__item\">\n                    <li\n                        className=\"char__item\"\n                        tabIndex={0}\n                        ref={el => itemRefs.current[i] = el}\n                        key={item.key}\n                        onClick={() => {\n                            props.onCharSelected(item.key)\n                            focusOnItem(i)\n                        }}\n                        onKeyPress={(e) => {\n                            if (e.key === ' ' || e.key === \"Enter\") {\n                                props.onCharSelected(item.key);\n                                focusOnItem(i);\n                            }\n                        }}\n                    >\n\n                        <img src={item.thumbnail} alt=\"abyss\" style={checkCover} />\n                        <div className=\"char__name\">{item.name}</div>\n                    </li>\n                </CSSTransition>\n            )\n        })\n\n        return (\n            <ul className=\"char__grid\">\n                <TransitionGroup component={null}>\n                    {items}\n                </TransitionGroup>\n            </ul>\n        )\n    }\n\n    // __________________________________________________________________\n\n    const elements = useMemo(() => {\n        return setContent(process, () => renderItems(charList), newItemLoading);\n        // eslint-disable-next-line \n    }, [process])\n\n\n    return (\n        <div className=\"char__list\">\n\n            {elements}\n            <button\n                className=\"button button__main button__long\"\n                disabled={newItemLoading}\n                style={{ 'display': charEnded ? 'none' : 'block' }}\n                onClick={() => onRequest(offset)}\n            >\n                <div className=\"inner\">load more</div>\n            </button>\n        </div>\n    )\n\n}\n\n//? валідація пропса onCharSelected на тип - функція та наявність в цілому\nCharList.protoTypes = {\n    onCharSelected: PropTypes.func.isRequired\n}\n\nexport default CharList;\n\n","import { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\n\nimport useMarvelService from '../../services/MarvelService';\nimport setContent from '../../utils/setContent';\n\nimport './charInfo.scss';\n\nconst CharInfo = (props) => {\n\n    const [char, setChar] = useState(null);\n\n    const { getCharacter, clearError, process, setProcess } = useMarvelService();\n\n    useEffect(() => {\n        updateChar()\n        // eslint-disable-next-line\n    }, [props.charId])\n\n\n    const updateChar = () => {\n        const { charId } = props;\n        if (!charId) {\n            return;\n        }\n        clearError();\n        getCharacter(charId)\n            .then(onCharLoaded)\n            .then(() => setProcess('confirmed'))\n    }\n\n    const onCharLoaded = (char) => {          //! відповідає за кінцевий результат\n        setChar(char);\n    }\n\n    // _________________________________________________________\n    // const skeleton = char || loading || error ? null : <Skeleton />;\n    // const errorMassage = error ? <ErrorMessage /> : null;\n    // const spinner = loading ? <Spinner /> : null;\n    // const content = !(loading || error || !char) ? <View char={char} /> : null;\n\n    // return (\n    //     <div className=\"char__info\" >\n    //         {skeleton}\n    //         {errorMassage}\n    //         {spinner}\n    //         {content}          \n    //     </div>\n    // )\n\n    return (\n        <div className=\"char__info\" >\n            {setContent(process, View, char)}\n        </div>\n    )\n}\n\nconst View = ({ data }) => {\n    const { name, description, thumbnail, homepage, wiki, comics } = data;\n    const checkCover = thumbnail.search('not_available') > 0 ? { objectFit: 'contain' } : null;\n\n    return (\n        <>\n            <div className=\"char__basics\">\n                <img src={thumbnail} alt={name}\n                    style={checkCover} />\n                <div>\n                    <div className=\"char__info-name\">{name}</div>\n                    <div className=\"char__btns\">\n                        <a href={homepage} className=\"button button__main\">\n                            <div className=\"inner\">Homepage</div>\n                        </a>\n                        <a href={wiki} className=\"button button__secondary\">\n                            <div className=\"inner\">Wiki</div>\n                        </a>\n                    </div>\n                </div>\n            </div>\n            <div className=\"char__descr\">\n                {description}\n            </div>\n            <div className=\"char__comics\">Comics:</div>\n            <ul className=\"char__comics-list\">\n\n                {comics.length > 0 ? null : \"There is no comics with this characters\"}\n                {\n                    comics.map((item, i) => {\n                        // eslint-disable-next-line\n                        if (i > 9) return;\n                        return (\n                            <li key={i} className=\"char__comics-item\">\n                                {item.name}\n                            </li>\n                        )\n                    })\n                }\n            </ul>\n        </>\n    )\n}\n\nCharInfo.propTypes = {\n    charId: PropTypes.number\n}\n\nexport default CharInfo;\n\n","import { useState } from 'react';\r\nimport { Formik, Form, Field, ErrorMessage as FormikErrorMessage } from 'formik';\r\nimport * as Yup from 'yup';\r\nimport { Link } from 'react-router-dom';\r\n\r\nimport useMarvelService from '../../services/MarvelService';\r\nimport ErrorMessage from '../errorMassage/ErrorMessage';\r\n\r\nimport './charSearchForm.scss';\r\n\r\nconst CharSearchForm = () => {\r\n    const [char, setChar] = useState(null);\r\n    const { getCharacterByName, clearError, process, setProcess } = useMarvelService();\r\n\r\n    const onCharLoaded = (char) => {\r\n        setChar(char);\r\n    }\r\n\r\n    const updateChar = (name) => {\r\n        clearError();\r\n\r\n        getCharacterByName(name)\r\n            .then(onCharLoaded)\r\n            .then(() => setProcess('confirmed'));\r\n    }\r\n\r\n    const errorMessage = process === 'error' ? <div className=\"char__search-critical-error\"><ErrorMessage /></div> : null;\r\n    const results = !char ? null : char.length > 0 ?\r\n        <div className=\"char__search-wrapper\">\r\n            <div className=\"char__search-success\">There is! Visit {char[0].name} page?</div>\r\n            <Link to={`/www-react-api/characters/${char[0].key}`} className=\"button button__secondary\">\r\n                <div className=\"inner\">To page</div>\r\n            </Link>\r\n        </div> :\r\n        <div className=\"char__search-error\">\r\n            The character was not found. Check the name and try again\r\n        </div>;\r\n\r\n    return (\r\n        <div className=\"char__search-form\">\r\n            <Formik\r\n                initialValues={{\r\n                    charName: ''\r\n                }}\r\n                validationSchema={Yup.object({\r\n                    charName: Yup.string().required('This field is required')\r\n                })}\r\n                onSubmit={({ charName }) => {\r\n                    updateChar(charName);\r\n                }}\r\n            >\r\n                <Form>\r\n                    <label className=\"char__search-label\" htmlFor=\"charName\">Or find a character by name:</label>\r\n                    <div className=\"char__search-wrapper\">\r\n                        <Field\r\n                            id=\"charName\"\r\n                            name='charName'\r\n                            type='text'\r\n                            placeholder=\"Enter name\" />\r\n                        <button\r\n                            type='submit'\r\n                            className=\"button button__main\"\r\n                            disabled={process === 'loading'}>\r\n                            <div className=\"inner\">find</div>\r\n                        </button>\r\n                    </div>\r\n                    <FormikErrorMessage component=\"div\" className=\"char__search-error\" name=\"charName\" />\r\n                </Form>\r\n            </Formik>\r\n            {results}\r\n            {errorMessage}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default CharSearchForm;","import { Component } from \"react\";\r\nimport ErrorMessage from \"../errorMassage/ErrorMessage\";\r\n\r\n\r\nclass ErrorBoundary extends Component {          //! клас запобіжник\r\n    state = {\r\n        error: false\r\n    }\r\n\r\n    // static getDerivedStateFromError(error) {  //! використовуєм якщо потрібно тільки обновити state\r\n    //     return { error: true }\r\n    // }\r\n\r\n    componentDidCatch(error, errorInfo) {\r\n        console.log(error, errorInfo);\r\n        this.setState({\r\n            error: true\r\n        })\r\n    }\r\n\r\n    render() {\r\n        if (this.state.error) {\r\n            return <ErrorMessage />       //! рендеримо повідомлення про помилку\r\n        }\r\n\r\n        return this.props.children;          //! рендеримо компонент якщо все гуд\r\n    }\r\n}\r\n\r\nexport default ErrorBoundary;","export default __webpack_public_path__ + \"static/media/vision.067d4ae1.png\";","import { useState } from \"react\";\r\nimport { Helmet } from \"react-helmet\";\r\n\r\nimport RandomChar from \"../randomChar/RandomChar\";\r\nimport CharList from \"../charList/CharList\";\r\nimport CharInfo from \"../charInfo/CharInfo\";\r\nimport CharSearchForm from '../charSearchForm/CharSearchForm';\r\nimport ErrorBoundary from \"../errorBoundary/ErrorBoundary\";\r\n\r\nimport decoration from '../../resources/img/vision.png';\r\n\r\nconst MainPage = () => {\r\n\r\n\r\n    const [selectedChar, setChar] = useState();     //! стейт для підйому id\r\n\r\n    const onCharSelected = (id) => {               //! підйом id вибраного перса з CharList\r\n        setChar(id);\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Helmet>\r\n                <meta\r\n                    name=\"description\"\r\n                    content=\"Marvel information portal\"\r\n                />\r\n                <title>Marvel information</title>\r\n            </Helmet>\r\n\r\n            <ErrorBoundary>\r\n                <RandomChar />\r\n            </ErrorBoundary>\r\n            <div className=\"char__content\">\r\n                <ErrorBoundary>\r\n                    <CharList onCharSelected={onCharSelected} />\r\n                </ErrorBoundary>\r\n                <div>\r\n                    <ErrorBoundary>\r\n                        <CharInfo charId={selectedChar} />\r\n                    </ErrorBoundary>\r\n                    <ErrorBoundary>\r\n                        <CharSearchForm />\r\n                    </ErrorBoundary>\r\n                </div>\r\n            </div>\r\n            <img className=\"bg-decoration\" src={decoration} alt=\"vision\" />\r\n        </>\r\n    )\r\n\r\n}\r\n\r\nexport default MainPage;","export default __webpack_public_path__ + \"static/media/error.42292aa1.gif\";","import img from './error.gif';\r\n\r\nconst ErrorMessage = () => {\r\n    return (\r\n        <img\r\n            src={img}\r\n            style={{ display: 'block', width: \"250px\", height: \"250px\", objectFit: 'contain', margin: \"0 auto\" }}\r\n            alt='Error'\r\n        />\r\n    )\r\n}\r\n\r\nexport default ErrorMessage;","import { useHttp } from '../hooks/http.hook';\r\n\r\nconst useMarvelService = () => {\r\n    const { request, clearError, process, setProcess } = useHttp();       //! витягую сутності з хука\r\n\r\n    const _apiBase = 'https://gateway.marvel.com:443/v1/public/';\r\n    const _apiKey = 'apikey=663b4a9becd98b0462ce0969a62eb013';\r\n    const _baseOffset = 210;\r\n\r\n\r\n    const getCharacter = async (id) => {\r\n        const res = await request(`${_apiBase}characters/${id}?${_apiKey}`);\r\n        return _transformCharacter(res.data.results[0]);\r\n    }\r\n\r\n    const getAllCharacters = async (offset = _baseOffset) => {   // offset по замовчуванню якщо не передається\r\n        const res = await request(`${_apiBase}characters?limit=9&offset=${offset}&${_apiKey}`);\r\n        return res.data.results.map(_transformCharacter);\r\n    }\r\n\r\n    // метод повертає обєкт від API тільки з потрібними полями\r\n    const _transformCharacter = (char) => {\r\n        return {\r\n            name: char.name,\r\n            description: char.description ? `${char.description.slice(0, 210)}...` : 'No data',\r\n            thumbnail: char.thumbnail.path + '.' + char.thumbnail.extension,\r\n            homepage: char.urls[0].url,\r\n            wiki: char.urls[1].url,\r\n            key: char.id,\r\n            comics: char.comics.items\r\n        }\r\n    }\r\n    //* ____________________________________\r\n\r\n    const getAllComics = async (offset = 1) => {\r\n        const res = await request(`${_apiBase}comics?orderBy=issueNumber&limit=8&offset=${offset}&${_apiKey}`);\r\n        return res.data.results.map(_transformComics);\r\n    }\r\n\r\n    const getComic = async (id) => {\r\n        const res = await request(`${_apiBase}comics/${id}?${_apiKey}`);\r\n        return _transformComics(res.data.results[0]);\r\n    }\r\n\r\n    const _transformComics = (comics) => {\r\n        return {\r\n            id: comics.id,\r\n            title: comics.title,\r\n            description: comics.description || 'There is no description',\r\n            pageCount: comics.pageCount ? `${comics.pageCount} p.` : 'No information about the number of pages',\r\n            thumbnail: comics.thumbnail.path + '.' + comics.thumbnail.extension,\r\n            language: comics.textObjects.language || 'en-us',\r\n            price: comics.prices[0].price ? `${comics.prices[0].price}$` : 'not available'\r\n        }\r\n    }\r\n\r\n    //* ____________________________________\r\n\r\n    const getCharacterByName = async (name) => {\r\n        const res = await request(`${_apiBase}characters?name=${name}&${_apiKey}`);\r\n        return res.data.results.map(_transformCharacter);\r\n    }\r\n\r\n    //* ____________________________________\r\n\r\n\r\n    return {\r\n        process,\r\n        setProcess,\r\n        getAllCharacters,\r\n        getCharacter,\r\n        clearError,\r\n        getAllComics,\r\n        getComic,\r\n        getCharacterByName\r\n    };\r\n\r\n}\r\n\r\nexport default useMarvelService;\r\n\r\n\r\n\r\n\r\n//! провірка Сервісу\r\n//* http://prntscr.com/22qy9a6\r\n//* http://prntscr.com/26sa6bn\r\n\r\n//? getResource old\r\n// getResource = async (url) => {\r\n//     let res = await fetch(url);           // чекаєм і отримуєм promise дані по запросу\r\n\r\n//     if (!res.ok) {\r\n//         throw new Error(`Could not fetch ${url}, status: ${res.status}`);\r\n//     }\r\n\r\n//     return await res.json();                // трансформ. в promise JS обєкт для подальшого викор.\r\n// }","import { useState, useCallback } from \"react\";\r\n\r\nexport const useHttp = () => {\r\n    const [process, setProcess] = useState('waiting');\r\n\r\n    const request = useCallback(async (url, method = 'GET', body = null, headers = { 'Content-Type': 'application/json' }) => {\r\n\r\n        setProcess('loading');\r\n\r\n        try {\r\n            const response = await fetch(url, { method, body, headers });\r\n\r\n            if (!response.ok) {\r\n                throw new Error(`Could not fetch ${url}, status: ${response.status}`);\r\n            }\r\n\r\n            const data = await response.json();\r\n\r\n            return data;\r\n        } catch (e) {\r\n            setProcess('error');\r\n            throw e;\r\n        }\r\n\r\n    }, []);\r\n\r\n    const clearError = useCallback(() => {\r\n        setProcess('loading');\r\n    }, []);\r\n\r\n    return { request, clearError, process, setProcess }\r\n}","import './skeleton.scss';\n\nconst Skeleton = () => {\n    return (\n        <>\n            <p className=\"char__select\">Please select a character to see information</p>\n            <div className=\"skeleton\">\n                <div className=\"pulse skeleton__header\">\n                    <div className=\"pulse skeleton__circle\"></div>\n                    <div className=\"pulse skeleton__mini\"></div>\n                </div>\n                <div className=\"pulse skeleton__block\"></div>\n                <div className=\"pulse skeleton__block\"></div>\n                <div className=\"pulse skeleton__block\"></div>\n            </div>\n        </>\n    )\n}\n\nexport default Skeleton;","import Spinner from '../components/spinner/Spinner';\r\nimport ErrorMessage from '../components/errorMassage/ErrorMessage';\r\nimport Skeleton from '../components/skeleton/Skeleton';\r\n\r\n\r\nconst setContent = (process, Component, data) => {\r\n    switch (process) {\r\n        case 'waiting':\r\n            return <Skeleton />;\r\n        // break;\r\n        case 'loading':\r\n            return <Spinner />;\r\n        // break;\r\n        case 'confirmed':\r\n            return <Component data={data} />;\r\n        // break;\r\n        case 'error':\r\n            return <ErrorMessage />;\r\n        // break;\r\n        default:\r\n            throw new Error('Unexpected process state');\r\n    }\r\n}\r\n\r\nexport default setContent;"],"sourceRoot":""}