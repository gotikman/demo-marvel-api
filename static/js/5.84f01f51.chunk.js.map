{"version":3,"sources":["resources/img/mjolnir.png","components/randomChar/RandomChar.js","components/charList/CharList.js","components/skeleton/Skeleton.js","components/charInfo/CharInfo.js","components/charSearchForm/CharSearchForm.js","components/errorBoundary/ErrorBoundary.js","resources/img/vision.png","components/pages/MainPage.js","components/errorMassage/error.gif","components/errorMassage/ErrorMessage.js","services/MarvelService.js","hooks/http.hook.js"],"names":["View","char","name","description","thumbnail","homepage","wiki","checkCover","search","objectFit","className","src","alt","style","href","RandomChar","useState","setChar","useMarvelService","loading","error","getCharacter","clearError","useEffect","updateChar","timirId","setInterval","clearInterval","onCharLoaded","id","Math","floor","random","then","errorMessage","ErrorMessage","spinner","Spinner","content","onClick","mjolnir","CharList","props","charList","setCharList","newItemLoading","setNewItemLoading","offset","setOffset","charEnded","setCharEnded","getAllCharacters","onRequest","initial","onCharListLoaded","newcharList","ended","length","itemRefs","useRef","focusOnItem","current","forEach","item","classList","remove","add","focus","items","arr","map","i","CSSTransition","timeout","classNames","tabIndex","ref","el","onCharSelected","key","onKeyPress","e","TransitionGroup","component","renderItems","errorMassage","disabled","protoTypes","PropTypes","func","isRequired","Skeleton","comics","CharInfo","charId","skeleton","CharSearchForm","getCharacterByName","results","to","initialValues","charName","validationSchema","Yup","required","onSubmit","htmlFor","type","placeholder","ErrorBoundary","state","errorInfo","console","log","this","setState","children","Component","MainPage","selectedChar","decoration","img","display","width","height","margin","setLoading","setError","request","useCallback","url","a","method","body","headers","fetch","response","ok","Error","status","json","data","message","useHttp","_apiBase","_apiKey","res","_transformCharacter","slice","path","extension","urls","getAllComics","_transformComics","getComic","title","pageCount","language","textObjects","price","prices"],"mappings":"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","file":"static/js/5.84f01f51.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/mjolnir.61f31e18.png\";","import { useState, useEffect } from \"react\";\nimport Spinner from \"../spinner/Spinner\";\nimport ErrorMessage from \"../errorMassage/ErrorMessage\";\nimport useMarvelService from \"../../services/MarvelService\";\n\nimport './randomChar.scss';\nimport mjolnir from '../../resources/img/mjolnir.png';\n\nconst RandomChar = () => {\n\n    const [char, setChar] = useState(null);\n    const { loading, error, getCharacter, clearError } = useMarvelService();\n\n    useEffect(() => {\n        updateChar();\n        const timirId = setInterval(updateChar, 10000)\n\n        return () => {\n            clearInterval(timirId)\n        }\n\n        //  eslint-disable-next-line\n    }, [])\n\n    const onCharLoaded = (char) => {          //! відповідає за кінцевий результат\n        setChar(char);\n    }\n\n\n    const updateChar = () => {\n        clearError();\n        const id = Math.floor(Math.random() * (1011400 - 1011000) + 1011000);\n        getCharacter(id)\n            .then(onCharLoaded)\n    }\n\n    const errorMessage = error ? <ErrorMessage /> : null;\n    const spinner = loading ? <Spinner /> : null;\n    const content = !(loading || error || !char) ? <View char={char} /> : null;\n\n    return (\n        <div className=\"randomchar\">\n            {errorMessage}\n            {spinner}\n            {content}\n            <div className=\"randomchar__static\">\n                <p className=\"randomchar__title\">\n                    Random character for today!<br />\n                    Do you want to get to know him better?\n                </p>\n                <p className=\"randomchar__title\">\n                    Or choose another one\n                </p>\n                <button className=\"button button__main\"\n                    onClick={updateChar}>\n                    <div className=\"inner\">try it</div>\n                </button>\n                <img src={mjolnir} alt=\"mjolnir\" className=\"randomchar__decoration\" />\n            </div>\n        </div>\n    )\n\n}\n\nconst View = ({ char }) => {\n    const { name, description, thumbnail, homepage, wiki } = char;\n\n    const checkCover = thumbnail.search('not_available') > 0 ? { objectFit: 'contain' } : null;\n\n    return (\n        <div className=\"randomchar__block\">\n            <img src={thumbnail} alt=\"Random character\" className=\"randomchar__img\"\n                style={checkCover} />\n            <div className=\"randomchar__info\">\n                <p className=\"randomchar__name\">{name}</p>\n                <p className=\"randomchar__descr\">{description}\n                </p>\n                <div className=\"randomchar__btns\">\n                    <a href={homepage} className=\"button button__main\">\n                        <div className=\"inner\">homepage</div>\n                    </a>\n                    <a href={wiki} className=\"button button__secondary\">\n                        <div className=\"inner\">Wiki</div>\n                    </a>\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default RandomChar;\n\n","import { useState, useEffect, useRef } from 'react';\nimport PropTypes from 'prop-types';\nimport { CSSTransition, TransitionGroup } from 'react-transition-group'\n\nimport Spinner from '../spinner/Spinner';\nimport ErrorMessage from '../errorMassage/ErrorMessage';\nimport useMarvelService from '../../services/MarvelService';\nimport './charList.scss';\n\nconst CharList = (props) => {\n\n    const [charList, setCharList] = useState([]);\n    const [newItemLoading, setNewItemLoading] = useState(false);\n    const [offset, setOffset] = useState(210);                      // 1539 тестування останніх\n    const [charEnded, setCharEnded] = useState(false);\n\n    const { loading, error, getAllCharacters } = useMarvelService();  //!\n\n    useEffect(() => {\n        onRequest(offset, true);                          // викликаєм без значення, в сервісі підставиться дефолтний\n        // eslint-disable-next-line\n    }, [])                                                // [] - запускаєм 1 раз\n\n    const onRequest = (offset, initial) => {              // загрузка і дозагрузка персонажів\n        initial ? setNewItemLoading(false) : setNewItemLoading(true);\n        getAllCharacters(offset)\n            .then(onCharListLoaded)\n    }\n\n\n    const onCharListLoaded = (newcharList) => {\n\n        let ended = false;\n        if (newcharList.length < 9) {\n            ended = true;\n        }\n\n        setCharList(charList => [...charList, ...newcharList]);  //? розгортаєм старі і дозагружені персонажі\n\n        setNewItemLoading(newItemLoading => false);              // включаєм кнопку після дозагрузки \n        setOffset(offset => offset + 9);                         //? зміщуєм діапазон дозагрузки персонажів   \n        setCharEnded(charEnded => ended)\n    }\n\n\n    //! Створюю масив для Ref і функцію для добавлення call-back ref\n    const itemRefs = useRef([]);\n\n    const focusOnItem = (id) => {\n        itemRefs.current.forEach(item => item.classList.remove('char__item_selected'));\n        itemRefs.current[id].classList.add('char__item_selected');\n        itemRefs.current[id].focus();\n    }\n\n\n    function renderItems(arr) {\n        const items = arr.map((item, i) => {\n            const checkCover = item.thumbnail.search('not_available') > 0 ? { objectFit: 'unset' } : null;\n\n            return (\n                <CSSTransition key={item.key} timeout={500} classNames=\"char__item\">\n                    <li\n                        className=\"char__item\"\n                        tabIndex={0}\n                        ref={el => itemRefs.current[i] = el}\n                        key={item.key}\n                        onClick={() => {\n                            props.onCharSelected(item.key)\n                            focusOnItem(i)\n                        }}\n                        onKeyPress={(e) => {\n                            if (e.key === ' ' || e.key === \"Enter\") {\n                                props.onCharSelected(item.key);\n                                focusOnItem(i);\n                            }\n                        }}\n                    >\n\n                        <img src={item.thumbnail} alt=\"abyss\" style={checkCover} />\n                        <div className=\"char__name\">{item.name}</div>\n                    </li>\n                </CSSTransition>\n            )\n        })\n\n        return (\n            <ul className=\"char__grid\">\n                <TransitionGroup component={null}>\n                    {items}\n                </TransitionGroup>\n            </ul>\n        )\n    }\n\n    // __________________________________________________________________\n\n\n    const items = renderItems(charList);\n\n    const spinner = loading && !newItemLoading ? <Spinner /> : null;\n    const errorMassage = error ? <ErrorMessage /> : null;\n\n\n\n    return (\n        <div className=\"char__list\">\n            {spinner}\n            {errorMassage}\n            {items}\n            <button\n                className=\"button button__main button__long\"\n                disabled={newItemLoading}\n                style={{ 'display': charEnded ? 'none' : 'block' }}\n                onClick={() => onRequest(offset)}\n            >\n                <div className=\"inner\">load more</div>\n            </button>\n        </div>\n    )\n\n}\n\n//? валідація пропса onCharSelected на тип - функція та наявність в цілому\nCharList.protoTypes = {\n    onCharSelected: PropTypes.func.isRequired\n}\n\nexport default CharList;\n\n","import './skeleton.scss';\n\nconst Skeleton = () => {\n    return (\n        <>\n            <p className=\"char__select\">Please select a character to see information</p>\n            <div className=\"skeleton\">\n                <div className=\"pulse skeleton__header\">\n                    <div className=\"pulse skeleton__circle\"></div>\n                    <div className=\"pulse skeleton__mini\"></div>\n                </div>\n                <div className=\"pulse skeleton__block\"></div>\n                <div className=\"pulse skeleton__block\"></div>\n                <div className=\"pulse skeleton__block\"></div>\n            </div>\n        </>\n    )\n}\n\nexport default Skeleton;","import { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\n\nimport useMarvelService from '../../services/MarvelService';\nimport Spinner from '../spinner/Spinner';\nimport ErrorMessage from '../errorMassage/ErrorMessage';\nimport Skeleton from '../skeleton/Skeleton';\n\nimport './charInfo.scss';\n\nconst CharInfo = (props) => {\n\n    const [char, setChar] = useState(null);\n\n    const { loading, error, getCharacter, clearError } = useMarvelService();\n\n    useEffect(() => {\n        updateChar()\n        // eslint-disable-next-line\n    }, [props.charId])\n\n\n    const updateChar = () => {\n        const { charId } = props;\n        if (!charId) {\n            return;\n        }\n        clearError();\n        getCharacter(charId)\n            .then(onCharLoaded)\n    }\n\n    const onCharLoaded = (char) => {          //! відповідає за кінцевий результат\n        setChar(char);\n    }\n\n    // _________________________________________________________\n\n    const skeleton = char || loading || error ? null : <Skeleton />;\n    const errorMassage = error ? <ErrorMessage /> : null;\n    const spinner = loading ? <Spinner /> : null;\n    const content = !(loading || error || !char) ? <View char={char} /> : null;\n\n    return (\n        <div className=\"char__info\" >\n            {skeleton}\n            {errorMassage}\n            {spinner}\n            {content}\n        </div>\n    )\n\n}\n\nconst View = ({ char }) => {\n    const { name, description, thumbnail, homepage, wiki, comics } = char;\n    const checkCover = thumbnail.search('not_available') > 0 ? { objectFit: 'contain' } : null;\n\n    return (\n        <>\n            <div className=\"char__basics\">\n                <img src={thumbnail} alt={name}\n                    style={checkCover} />\n                <div>\n                    <div className=\"char__info-name\">{name}</div>\n                    <div className=\"char__btns\">\n                        <a href={homepage} className=\"button button__main\">\n                            <div className=\"inner\">Homepage</div>\n                        </a>\n                        <a href={wiki} className=\"button button__secondary\">\n                            <div className=\"inner\">Wiki</div>\n                        </a>\n                    </div>\n                </div>\n            </div>\n            <div className=\"char__descr\">\n                {description}\n            </div>\n            <div className=\"char__comics\">Comics:</div>\n            <ul className=\"char__comics-list\">\n\n                {comics.length > 0 ? null : \"There is no comics with this characters\"}\n                {\n                    comics.map((item, i) => {\n                        // eslint-disable-next-line\n                        if (i > 9) return;\n                        return (\n                            <li key={i} className=\"char__comics-item\">\n                                {item.name}\n                            </li>\n                        )\n                    })\n                }\n            </ul>\n        </>\n    )\n}\n\nCharInfo.propTypes = {\n    charId: PropTypes.number\n}\n\nexport default CharInfo;\n\n","import { useState } from 'react';\r\nimport { Formik, Form, Field, ErrorMessage as FormikErrorMessage } from 'formik';\r\nimport * as Yup from 'yup';\r\nimport { Link } from 'react-router-dom';\r\n\r\nimport useMarvelService from '../../services/MarvelService';\r\nimport ErrorMessage from '../errorMassage/ErrorMessage';\r\n\r\nimport './charSearchForm.scss';\r\n\r\nconst CharSearchForm = () => {\r\n    const [char, setChar] = useState(null);\r\n    const { loading, error, getCharacterByName, clearError } = useMarvelService();\r\n\r\n    const onCharLoaded = (char) => {\r\n        setChar(char);\r\n    }\r\n\r\n    const updateChar = (name) => {\r\n        clearError();\r\n\r\n        getCharacterByName(name)\r\n            .then(onCharLoaded);\r\n    }\r\n\r\n    const errorMessage = error ? <div className=\"char__search-critical-error\"><ErrorMessage /></div> : null;\r\n    const results = !char ? null : char.length > 0 ?\r\n        <div className=\"char__search-wrapper\">\r\n            <div className=\"char__search-success\">There is! Visit {char[0].name} page?</div>\r\n            <Link to={`/www-react-api/characters/${char[0].key}`} className=\"button button__secondary\">\r\n                <div className=\"inner\">To page</div>\r\n            </Link>\r\n        </div> :\r\n        <div className=\"char__search-error\">\r\n            The character was not found. Check the name and try again\r\n        </div>;\r\n\r\n    return (\r\n        <div className=\"char__search-form\">\r\n            <Formik\r\n                initialValues={{\r\n                    charName: ''\r\n                }}\r\n                validationSchema={Yup.object({\r\n                    charName: Yup.string().required('This field is required')\r\n                })}\r\n                onSubmit={({ charName }) => {\r\n                    updateChar(charName);\r\n                }}\r\n            >\r\n                <Form>\r\n                    <label className=\"char__search-label\" htmlFor=\"charName\">Or find a character by name:</label>\r\n                    <div className=\"char__search-wrapper\">\r\n                        <Field\r\n                            id=\"charName\"\r\n                            name='charName'\r\n                            type='text'\r\n                            placeholder=\"Enter name\" />\r\n                        <button\r\n                            type='submit'\r\n                            className=\"button button__main\"\r\n                            disabled={loading}>\r\n                            <div className=\"inner\">find</div>\r\n                        </button>\r\n                    </div>\r\n                    <FormikErrorMessage component=\"div\" className=\"char__search-error\" name=\"charName\" />\r\n                </Form>\r\n            </Formik>\r\n            {results}\r\n            {errorMessage}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default CharSearchForm;","import { Component } from \"react\";\r\nimport ErrorMessage from \"../errorMassage/ErrorMessage\";\r\n\r\n\r\nclass ErrorBoundary extends Component {          //! клас запобіжник\r\n    state = {\r\n        error: false\r\n    }\r\n\r\n    // static getDerivedStateFromError(error) {  //! використовуєм якщо потрібно тільки обновити state\r\n    //     return { error: true }\r\n    // }\r\n\r\n    componentDidCatch(error, errorInfo) {\r\n        console.log(error, errorInfo);\r\n        this.setState({\r\n            error: true\r\n        })\r\n    }\r\n\r\n    render() {\r\n        if (this.state.error) {\r\n            return <ErrorMessage />       //! рендеримо повідомлення про помилку\r\n        }\r\n\r\n        return this.props.children;          //! рендеримо компонент якщо все гуд\r\n    }\r\n}\r\n\r\nexport default ErrorBoundary;","export default __webpack_public_path__ + \"static/media/vision.067d4ae1.png\";","import { useState } from \"react\";\r\n\r\nimport RandomChar from \"../randomChar/RandomChar\";\r\nimport CharList from \"../charList/CharList\";\r\nimport CharInfo from \"../charInfo/CharInfo\";\r\nimport CharSearchForm from '../charSearchForm/CharSearchForm';\r\nimport ErrorBoundary from \"../errorBoundary/ErrorBoundary\";\r\n\r\nimport decoration from '../../resources/img/vision.png';\r\n\r\nconst MainPage = () => {\r\n\r\n\r\n    const [selectedChar, setChar] = useState();     //! стейт для підйому id\r\n\r\n    const onCharSelected = (id) => {               //! підйом id вибраного перса з CharList\r\n        setChar(id);\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <ErrorBoundary>\r\n                <RandomChar />\r\n            </ErrorBoundary>\r\n            <div className=\"char__content\">\r\n                <ErrorBoundary>\r\n                    <CharList onCharSelected={onCharSelected} />\r\n                </ErrorBoundary>\r\n                <div>\r\n                    <ErrorBoundary>\r\n                        <CharInfo charId={selectedChar} />\r\n                    </ErrorBoundary>\r\n                    <ErrorBoundary>\r\n                        <CharSearchForm />\r\n                    </ErrorBoundary>\r\n                </div>\r\n            </div>\r\n            <img className=\"bg-decoration\" src={decoration} alt=\"vision\" />\r\n        </>\r\n    )\r\n\r\n}\r\n\r\nexport default MainPage;","export default __webpack_public_path__ + \"static/media/error.42292aa1.gif\";","import img from './error.gif';\r\n\r\nconst ErrorMessage = () => {\r\n    return (\r\n        <img\r\n            src={img}\r\n            style={{ display: 'block', width: \"250px\", height: \"250px\", objectFit: 'contain', margin: \"0 auto\" }}\r\n            alt='Error'\r\n        />\r\n    )\r\n}\r\n\r\nexport default ErrorMessage;","import { useHttp } from '../hooks/http.hook';\r\n\r\nconst useMarvelService = () => {\r\n    const { loading, request, error, clearError } = useHttp();       //! витягую сутності з хука\r\n\r\n    const _apiBase = 'https://gateway.marvel.com:443/v1/public/';\r\n    const _apiKey = 'apikey=663b4a9becd98b0462ce0969a62eb013';\r\n    const _baseOffset = 210;\r\n\r\n\r\n    const getCharacter = async (id) => {\r\n        const res = await request(`${_apiBase}characters/${id}?${_apiKey}`);\r\n        return _transformCharacter(res.data.results[0]);\r\n    }\r\n\r\n    const getAllCharacters = async (offset = _baseOffset) => {   // offset по замовчуванню якщо не передається\r\n        const res = await request(`${_apiBase}characters?limit=9&offset=${offset}&${_apiKey}`);\r\n        return res.data.results.map(_transformCharacter);\r\n    }\r\n\r\n    // метод повертає обєкт від API тільки з потрібними полями\r\n    const _transformCharacter = (char) => {\r\n        return {\r\n            name: char.name,\r\n            description: char.description ? `${char.description.slice(0, 210)}...` : 'No data',\r\n            thumbnail: char.thumbnail.path + '.' + char.thumbnail.extension,\r\n            homepage: char.urls[0].url,\r\n            wiki: char.urls[1].url,\r\n            key: char.id,\r\n            comics: char.comics.items\r\n        }\r\n    }\r\n    //* ____________________________________\r\n\r\n    const getAllComics = async (offset = 1) => {\r\n        const res = await request(`${_apiBase}comics?orderBy=issueNumber&limit=8&offset=${offset}&${_apiKey}`);\r\n        return res.data.results.map(_transformComics);\r\n    }\r\n\r\n    const getComic = async (id) => {\r\n        const res = await request(`${_apiBase}comics/${id}?${_apiKey}`);\r\n        return _transformComics(res.data.results[0]);\r\n    }\r\n\r\n    const _transformComics = (comics) => {\r\n        return {\r\n            id: comics.id,\r\n            title: comics.title,\r\n            description: comics.description || 'There is no description',\r\n            pageCount: comics.pageCount ? `${comics.pageCount} p.` : 'No information about the number of pages',\r\n            thumbnail: comics.thumbnail.path + '.' + comics.thumbnail.extension,\r\n            language: comics.textObjects.language || 'en-us',\r\n            price: comics.prices[0].price ? `${comics.prices[0].price}$` : 'not available'\r\n        }\r\n    }\r\n\r\n    //* ____________________________________\r\n\r\n    const getCharacterByName = async (name) => {\r\n        const res = await request(`${_apiBase}characters?name=${name}&${_apiKey}`);\r\n        return res.data.results.map(_transformCharacter);\r\n    }\r\n\r\n    //* ____________________________________\r\n\r\n\r\n    return { loading, error, getAllCharacters, getCharacter, clearError, getAllComics, getComic, getCharacterByName };\r\n\r\n}\r\n\r\nexport default useMarvelService;\r\n\r\n\r\n\r\n\r\n//! провірка Сервісу\r\n//* http://prntscr.com/22qy9a6\r\n//* http://prntscr.com/26sa6bn\r\n\r\n//? getResource old\r\n// getResource = async (url) => {\r\n//     let res = await fetch(url);           // чекаєм і отримуєм promise дані по запросу\r\n\r\n//     if (!res.ok) {\r\n//         throw new Error(`Could not fetch ${url}, status: ${res.status}`);\r\n//     }\r\n\r\n//     return await res.json();                // трансформ. в promise JS обєкт для подальшого викор.\r\n// }","import { useState, useCallback } from \"react\";\r\n\r\nexport const useHttp = () => {\r\n    const [loading, setLoading] = useState(false);\r\n    const [error, setError] = useState(null);\r\n\r\n    const request = useCallback(async (url, method = 'GET', body = null, headers = { 'Content-Type': 'application/json' }) => {\r\n\r\n        setLoading(true);\r\n\r\n        try {\r\n            const response = await fetch(url, { method, body, headers });\r\n\r\n            if (!response.ok) {\r\n                throw new Error(`Could not fetch ${url}, status: ${response.status}`);\r\n            }\r\n\r\n            const data = await response.json();\r\n\r\n            setLoading(false);\r\n            return data;\r\n\r\n        } catch (e) {\r\n            setLoading(false);\r\n            setError(e.message);\r\n            throw e;\r\n        }\r\n\r\n    }, []);\r\n\r\n    const clearError = useCallback(() => setError(null), []);\r\n\r\n    return { loading, request, error, clearError }\r\n}"],"sourceRoot":""}