{"version":3,"sources":["components/spinner/Spinner.js","components/errorMassage/error.gif","components/errorMassage/ErrorMessage.js","services/MarvelService.js","hooks/http.hook.js","resources/img/mjolnir.png","components/randomChar/RandomChar.js","components/charList/CharList.js","components/skeleton/Skeleton.js","components/charInfo/CharInfo.js","components/errorBoundary/ErrorBoundary.js","resources/img/vision.png","components/pages/MainPage.js","components/comicsList/ComicsList.js","resources/img/Avengers.png","resources/img/Avengers_logo.png","components/appBanner/AppBanner.js","components/pages/ComicsPage.js","components/appHeader/AppHeader.js","components/app/App.js","index.js"],"names":["Spinner","xmlns","style","margin","background","display","width","height","viewBox","preserveAspectRatio","transform","cx","cy","r","fill","fillOpacity","attributeName","type","begin","values","keyTimes","dur","repeatCount","ErrorMessage","src","img","objectFit","alt","useMarvelService","useState","loading","setLoading","error","setError","request","useCallback","url","a","method","body","headers","fetch","response","ok","Error","status","json","data","message","clearError","useHttp","_apiBase","_apiKey","getCharacter","id","res","_transformCharacter","results","getAllCharacters","offset","map","char","name","description","slice","thumbnail","path","extension","homepage","urls","wiki","key","comics","items","getAllComics","_transformComics","getComic","title","pageCount","language","textObjects","price","prices","View","checkCover","search","className","href","RandomChar","setChar","useEffect","updateChar","onCharLoaded","Math","floor","random","then","errorMessage","spinner","content","onClick","mjolnir","CharList","props","charList","setCharList","newItemLoading","setNewItemLoading","setOffset","charEnded","setCharEnded","onRequest","initial","onCharListLoaded","newcharList","ended","length","itemRefs","useRef","focusOnItem","current","forEach","item","classList","remove","add","focus","arr","i","tabIndex","ref","el","onCharSelected","onKeyPress","e","renderItems","errorMassage","disabled","protoTypes","PropTypes","func","isRequired","Skeleton","CharInfo","charId","skeleton","ErrorBoundary","state","errorInfo","console","log","this","setState","children","Component","MainPage","selectedChar","decoration","ComicsList","comicsList","setComicsList","setnewItemLoading","comicsEnded","setComicsEnded","onComicsListLoaded","newComicsList","to","AppBanner","avengers","avengersLogo","ComicsPage","AppHeader","end","color","isActive","App","element","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.845c2f4b.chunk.js","sourcesContent":["const Spinner = () => {\n    return (\n        <svg xmlns=\"http://www.w3.org/2000/svg\" style={{ margin: '0 auto', background: 'none', display: 'block' }} width=\"200px\" height=\"200px\" viewBox=\"0 0 100 100\" preserveAspectRatio=\"xMidYMid\">\n            <g transform=\"translate(80,50)\">\n                <g transform=\"rotate(0)\">\n                    <circle cx=\"0\" cy=\"0\" r=\"7\" fill=\"#1c4595\" fillOpacity=\"1\">\n                        <animateTransform attributeName=\"transform\" type=\"scale\" begin=\"-0.875s\" values=\"1.5 1.5;1 1\" keyTimes=\"0;1\" dur=\"1s\" repeatCount=\"indefinite\"></animateTransform>\n                        <animate attributeName=\"fillOpacity\" keyTimes=\"0;1\" dur=\"1s\" repeatCount=\"indefinite\" values=\"1;0\" begin=\"-0.875s\"></animate>\n                    </circle>\n                </g>\n            </g><g transform=\"translate(71.21320343559643,71.21320343559643)\">\n                <g transform=\"rotate(45)\">\n                    <circle cx=\"0\" cy=\"0\" r=\"7\" fill=\"#1c4595\" fillOpacity=\"0.875\">\n                        <animateTransform attributeName=\"transform\" type=\"scale\" begin=\"-0.75s\" values=\"1.5 1.5;1 1\" keyTimes=\"0;1\" dur=\"1s\" repeatCount=\"indefinite\"></animateTransform>\n                        <animate attributeName=\"fillOpacity\" keyTimes=\"0;1\" dur=\"1s\" repeatCount=\"indefinite\" values=\"1;0\" begin=\"-0.75s\"></animate>\n                    </circle>\n                </g>\n            </g><g transform=\"translate(50,80)\">\n                <g transform=\"rotate(90)\">\n                    <circle cx=\"0\" cy=\"0\" r=\"7\" fill=\"#1c4595\" fillOpacity=\"0.75\">\n                        <animateTransform attributeName=\"transform\" type=\"scale\" begin=\"-0.625s\" values=\"1.5 1.5;1 1\" keyTimes=\"0;1\" dur=\"1s\" repeatCount=\"indefinite\"></animateTransform>\n                        <animate attributeName=\"fillOpacity\" keyTimes=\"0;1\" dur=\"1s\" repeatCount=\"indefinite\" values=\"1;0\" begin=\"-0.625s\"></animate>\n                    </circle>\n                </g>\n            </g><g transform=\"translate(28.786796564403577,71.21320343559643)\">\n                <g transform=\"rotate(135)\">\n                    <circle cx=\"0\" cy=\"0\" r=\"7\" fill=\"#1c4595\" fillOpacity=\"0.625\">\n                        <animateTransform attributeName=\"transform\" type=\"scale\" begin=\"-0.5s\" values=\"1.5 1.5;1 1\" keyTimes=\"0;1\" dur=\"1s\" repeatCount=\"indefinite\"></animateTransform>\n                        <animate attributeName=\"fillOpacity\" keyTimes=\"0;1\" dur=\"1s\" repeatCount=\"indefinite\" values=\"1;0\" begin=\"-0.5s\"></animate>\n                    </circle>\n                </g>\n            </g><g transform=\"translate(20,50.00000000000001)\">\n                <g transform=\"rotate(180)\">\n                    <circle cx=\"0\" cy=\"0\" r=\"7\" fill=\"#1c4595\" fillOpacity=\"0.5\">\n                        <animateTransform attributeName=\"transform\" type=\"scale\" begin=\"-0.375s\" values=\"1.5 1.5;1 1\" keyTimes=\"0;1\" dur=\"1s\" repeatCount=\"indefinite\"></animateTransform>\n                        <animate attributeName=\"fillOpacity\" keyTimes=\"0;1\" dur=\"1s\" repeatCount=\"indefinite\" values=\"1;0\" begin=\"-0.375s\"></animate>\n                    </circle>\n                </g>\n            </g><g transform=\"translate(28.78679656440357,28.786796564403577)\">\n                <g transform=\"rotate(225)\">\n                    <circle cx=\"0\" cy=\"0\" r=\"7\" fill=\"#1c4595\" fillOpacity=\"0.375\">\n                        <animateTransform attributeName=\"transform\" type=\"scale\" begin=\"-0.25s\" values=\"1.5 1.5;1 1\" keyTimes=\"0;1\" dur=\"1s\" repeatCount=\"indefinite\"></animateTransform>\n                        <animate attributeName=\"fillOpacity\" keyTimes=\"0;1\" dur=\"1s\" repeatCount=\"indefinite\" values=\"1;0\" begin=\"-0.25s\"></animate>\n                    </circle>\n                </g>\n            </g><g transform=\"translate(49.99999999999999,20)\">\n                <g transform=\"rotate(270)\">\n                    <circle cx=\"0\" cy=\"0\" r=\"7\" fill=\"#1c4595\" fillOpacity=\"0.25\">\n                        <animateTransform attributeName=\"transform\" type=\"scale\" begin=\"-0.125s\" values=\"1.5 1.5;1 1\" keyTimes=\"0;1\" dur=\"1s\" repeatCount=\"indefinite\"></animateTransform>\n                        <animate attributeName=\"fillOpacity\" keyTimes=\"0;1\" dur=\"1s\" repeatCount=\"indefinite\" values=\"1;0\" begin=\"-0.125s\"></animate>\n                    </circle>\n                </g>\n            </g><g transform=\"translate(71.21320343559643,28.78679656440357)\">\n                <g transform=\"rotate(315)\">\n                    <circle cx=\"0\" cy=\"0\" r=\"7\" fill=\"#1c4595\" fillOpacity=\"0.125\">\n                        <animateTransform attributeName=\"transform\" type=\"scale\" begin=\"0s\" values=\"1.5 1.5;1 1\" keyTimes=\"0;1\" dur=\"1s\" repeatCount=\"indefinite\"></animateTransform>\n                        <animate attributeName=\"fillOpacity\" keyTimes=\"0;1\" dur=\"1s\" repeatCount=\"indefinite\" values=\"1;0\" begin=\"0s\"></animate>\n                    </circle>\n                </g>\n            </g>\n        </svg>\n    )\n}\n\nexport default Spinner;","export default __webpack_public_path__ + \"static/media/error.42292aa1.gif\";","import img from './error.gif';\r\n\r\nconst ErrorMessage = () => {\r\n    return (\r\n        <img\r\n            src={img}\r\n            style={{ display: 'block', width: \"250px\", height: \"250px\", objectFit: 'contain', margin: \"0 auto\" }}\r\n            alt='Error'\r\n        />\r\n    )\r\n}\r\n\r\nexport default ErrorMessage;","import { useHttp } from '../hooks/http.hook';\r\n\r\nconst useMarvelService = () => {\r\n    const { loading, request, error, clearError } = useHttp();       //! витягую сутності з хука\r\n\r\n    const _apiBase = 'https://gateway.marvel.com:443/v1/public/';\r\n    const _apiKey = 'apikey=663b4a9becd98b0462ce0969a62eb013';\r\n    const _baseOffset = 210;\r\n\r\n\r\n    const getCharacter = async (id) => {\r\n        const res = await request(`${_apiBase}characters/${id}?${_apiKey}`);\r\n        return _transformCharacter(res.data.results[0]);\r\n    }\r\n\r\n    const getAllCharacters = async (offset = _baseOffset) => {   // offset по замовчуванню якщо не передається\r\n        const res = await request(`${_apiBase}characters?limit=9&offset=${offset}&${_apiKey}`);\r\n        return res.data.results.map(_transformCharacter);\r\n    }\r\n\r\n    // метод повертає обєкт від API тільки з потрібними полями\r\n    const _transformCharacter = (char) => {\r\n        return {\r\n            name: char.name,\r\n            description: char.description ? `${char.description.slice(0, 210)}...` : 'No data',\r\n            thumbnail: char.thumbnail.path + '.' + char.thumbnail.extension,\r\n            homepage: char.urls[0].url,\r\n            wiki: char.urls[1].url,\r\n            key: char.id,\r\n            comics: char.comics.items\r\n        }\r\n    }\r\n    //* ____________________________________\r\n\r\n    const getAllComics = async (offset = 1) => {\r\n        const res = await request(`${_apiBase}comics?orderBy=issueNumber&limit=8&offset=${offset}&${_apiKey}`);\r\n        return res.data.results.map(_transformComics);\r\n    }\r\n\r\n    const getComic = async (id) => {\r\n        const res = await request(`${_apiBase}comics/${id}?${_apiKey}`);\r\n        return _transformComics(res.data.results[0]);\r\n    }\r\n\r\n    const _transformComics = (comics) => {\r\n        return {\r\n            id: comics.id,\r\n            title: comics.title,\r\n            description: comics.description || 'There is no description',\r\n            pageCount: comics.pageCount ? `${comics.pageCount} p.` : 'No information about the number of pages',\r\n            thumbnail: comics.thumbnail.path + '.' + comics.thumbnail.extension,\r\n            language: comics.textObjects.language || 'en-us',\r\n            price: comics.prices[0].price ? `${comics.prices[0].price}$` : 'not available'\r\n        }\r\n    }\r\n\r\n    //* ____________________________________\r\n\r\n\r\n    return { loading, error, getAllCharacters, getCharacter, clearError, getAllComics, getComic };\r\n\r\n}\r\n\r\nexport default useMarvelService;\r\n\r\n\r\n//! провірка Сервісу\r\n//* http://prntscr.com/22qy9a6\r\n//* http://prntscr.com/26sa6bn\r\n\r\n//? getResource old\r\n// getResource = async (url) => {\r\n//     let res = await fetch(url);           // чекаєм і отримуєм promise дані по запросу\r\n\r\n//     if (!res.ok) {\r\n//         throw new Error(`Could not fetch ${url}, status: ${res.status}`);\r\n//     }\r\n\r\n//     return await res.json();                // трансформ. в promise JS обєкт для подальшого викор.\r\n// }","import { useState, useCallback } from \"react\";\r\n\r\nexport const useHttp = () => {\r\n    const [loading, setLoading] = useState(false);\r\n    const [error, setError] = useState(null);\r\n\r\n    const request = useCallback(async (url, method = 'GET', body = null, headers = { 'Content-Type': 'application/json' }) => {\r\n\r\n        setLoading(true);\r\n\r\n        try {\r\n            const response = await fetch(url, { method, body, headers });\r\n\r\n            if (!response.ok) {\r\n                throw new Error(`Could not fetch ${url}, status: ${response.status}`);\r\n            }\r\n\r\n            const data = await response.json();\r\n\r\n            setLoading(false);\r\n            return data;\r\n\r\n        } catch (e) {\r\n            setLoading(false);\r\n            setError(e.message);\r\n            throw e;\r\n        }\r\n\r\n    }, []);\r\n\r\n    const clearError = useCallback(() => setError(null), []);\r\n\r\n    return { loading, request, error, clearError }\r\n}","export default __webpack_public_path__ + \"static/media/mjolnir.61f31e18.png\";","import { useState, useEffect } from \"react\";\nimport Spinner from \"../spinner/Spinner\";\nimport ErrorMessage from \"../errorMassage/ErrorMessage\";\nimport useMarvelService from \"../../services/MarvelService\";\n\nimport './randomChar.scss';\nimport mjolnir from '../../resources/img/mjolnir.png';\n\nconst RandomChar = () => {\n\n    const [char, setChar] = useState(null);\n    const { loading, error, getCharacter, clearError } = useMarvelService();\n\n    useEffect(() => {\n        updateChar();\n        // const timirId = setInterval(updateChar, 6000)\n\n        // return () => {\n        //     clearInterval(timirId)\n        // }\n\n        // eslint-disable-next-line\n    }, [])\n\n    const onCharLoaded = (char) => {          //! відповідає за кінцевий результат\n        setChar(char);\n    }\n\n\n    const updateChar = () => {\n        clearError();\n        const id = Math.floor(Math.random() * (1011400 - 1011000) + 1011000);\n        getCharacter(id)\n            .then(onCharLoaded)\n    }\n\n    const errorMessage = error ? <ErrorMessage /> : null;\n    const spinner = loading ? <Spinner /> : null;\n    const content = !(loading || error || !char) ? <View char={char} /> : null;\n\n    return (\n        <div className=\"randomchar\">\n            {errorMessage}\n            {spinner}\n            {content}\n            <div className=\"randomchar__static\">\n                <p className=\"randomchar__title\">\n                    Random character for today!<br />\n                    Do you want to get to know him better?\n                </p>\n                <p className=\"randomchar__title\">\n                    Or choose another one\n                </p>\n                <button className=\"button button__main\"\n                    onClick={updateChar}>\n                    <div className=\"inner\">try it</div>\n                </button>\n                <img src={mjolnir} alt=\"mjolnir\" className=\"randomchar__decoration\" />\n            </div>\n        </div>\n    )\n\n}\n\nconst View = ({ char }) => {\n    const { name, description, thumbnail, homepage, wiki } = char;\n\n    const checkCover = thumbnail.search('not_available') > 0 ? { objectFit: 'contain' } : null;\n\n    return (\n        <div className=\"randomchar__block\">\n            <img src={thumbnail} alt=\"Random character\" className=\"randomchar__img\"\n                style={checkCover} />\n            <div className=\"randomchar__info\">\n                <p className=\"randomchar__name\">{name}</p>\n                <p className=\"randomchar__descr\">{description}\n                </p>\n                <div className=\"randomchar__btns\">\n                    <a href={homepage} className=\"button button__main\">\n                        <div className=\"inner\">homepage</div>\n                    </a>\n                    <a href={wiki} className=\"button button__secondary\">\n                        <div className=\"inner\">Wiki</div>\n                    </a>\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default RandomChar;\n\n","import { useState, useEffect, useRef } from 'react';\nimport PropTypes from 'prop-types';\n\nimport Spinner from '../spinner/Spinner';\nimport ErrorMessage from '../errorMassage/ErrorMessage';\nimport useMarvelService from '../../services/MarvelService';\nimport './charList.scss';\n\nconst CharList = (props) => {\n\n    const [charList, setCharList] = useState([]);\n\n    const [newItemLoading, setNewItemLoading] = useState(false);\n    const [offset, setOffset] = useState(210);                      // 1539 тестування останніх\n    const [charEnded, setCharEnded] = useState(false);\n\n    const { loading, error, getAllCharacters } = useMarvelService();  //!\n\n    useEffect(() => {\n        onRequest(offset, true);                          // викликаєм без значення, в сервісі підставиться дефолтний\n        // eslint-disable-next-line\n    }, [])                                                // [] - запускаєм 1 раз\n\n    const onRequest = (offset, initial) => {              // загрузка і дозагрузка персонажів\n        initial ? setNewItemLoading(false) : setNewItemLoading(true);\n        getAllCharacters(offset)\n            .then(onCharListLoaded)\n    }\n\n\n    const onCharListLoaded = (newcharList) => {\n        let ended = false;\n        if (newcharList.length < 9) {\n            ended = true;\n        }\n\n        setCharList(charList => [...charList, ...newcharList]);  //? розгортаєм старі і дозагружені персонажі\n\n        setNewItemLoading(newItemLoading => false);              // включаєм кнопку після дозагрузки \n        setOffset(offset => offset + 9);                         //? зміщуєм діапазон дозагрузки персонажів   \n        setCharEnded(charEnded => ended)\n    }\n\n\n    //! Створюю масив для Ref і функцію для добавлення call-back ref\n    const itemRefs = useRef([]);\n\n    const focusOnItem = (id) => {\n        itemRefs.current.forEach(item => item.classList.remove('char__item_selected'));\n        itemRefs.current[id].classList.add('char__item_selected');\n        itemRefs.current[id].focus();\n    }\n\n\n    function renderItems(arr) {\n        const items = arr.map((item, i) => {\n            const checkCover = item.thumbnail.search('not_available') > 0 ? { objectFit: 'unset' } : null;\n            return (\n                <li\n                    className=\"char__item\"\n                    tabIndex={0}\n                    ref={el => itemRefs.current[i] = el}\n                    key={item.key}\n                    onClick={() => {\n                        props.onCharSelected(item.key)\n                        focusOnItem(i)\n                    }}\n                    onKeyPress={(e) => {\n                        if (e.key === ' ' || e.key === \"Enter\") {\n                            props.onCharSelected(item.key);\n                            focusOnItem(i);\n                        }\n                    }}\n                >\n\n                    <img src={item.thumbnail} alt=\"abyss\" style={checkCover} />\n                    <div className=\"char__name\">{item.name}</div>\n                </li>\n            )\n        })\n\n        return (\n            <ul className=\"char__grid\">\n                {items}\n            </ul>\n        )\n    }\n\n    // __________________________________________________________________\n\n\n    const items = renderItems(charList);\n\n    const spinner = loading && !newItemLoading ? <Spinner /> : null;\n    const errorMassage = error ? <ErrorMessage /> : null;\n\n    return (\n        <div className=\"char__list\">\n            {spinner}\n            {errorMassage}\n            {items}\n            <button\n                className=\"button button__main button__long\"\n                disabled={newItemLoading}\n                style={{ 'display': charEnded ? 'none' : 'block' }}\n                onClick={() => onRequest(offset)}\n            >\n                <div className=\"inner\">load more</div>\n            </button>\n        </div>\n    )\n\n}\n\n//? валідація пропса onCharSelected на тип - функція та наявність в цілому\nCharList.protoTypes = {\n    onCharSelected: PropTypes.func.isRequired\n}\n\nexport default CharList;\n\n\n//! СВІЙ ВАРІАНТ РЕАЛІЗАЦІЇ ПІДСВІТКИ ПІСЛЯ КЛІКУ І УПРАВЛІННЯ ПО ТАБ\n// import { Component } from 'react';\n// import PropTypes from 'prop-types';\n\n// import Spinner from '../spinner/Spinner';\n// import ErrorMessage from '../errorMassage/ErrorMessage';\n// import MarvelService from '../../services/MarvelService';\n// import './charList.scss';\n\n// class CharList extends Component {\n\n//     state = {\n//         charList: [],\n//         loading: true,\n//         error: false,\n//         newItemLoading: false,\n//         offset: 1539,\n//         charEnded: false,\n//         styleSelect: null\n//     }\n\n//     marvelServise = new MarvelService();\n\n//     componentDidMount() {\n//         this.onRequest();                // викликаєм без значення, в сервісі підставиться дефолтний\n//         // window.addEventListener('scroll', this.scrollToEnd)\n//     }\n\n//     //* Скрипт підгрузки персонажів після прокрутки сторінки до кінця\n//     // componentWillUnmount() {\n//     //     window.removeEventListener('scroll', this.scrollToEnd)\n//     // }\n\n//     // scrollToEnd = () => {\n//     //     if (window.pageYOffset + document.documentElement.clientHeight\n//     //         >= document.documentElement.scrollHeight) {\n//     //         this.onRequest(this.state.offset)\n//     //     }\n//     // }\n\n//     onRequest = (offset) => {             // загрузка і дозагрузка персонажів\n//         this.onCharListLoading();         // блокуєм кнопку при дозагрузці\n//         this.marvelServise\n//             .getAllCharacters(offset)\n//             .then(this.onCharListLoaded)\n//             .catch(this.onError)\n//     }\n\n\n//     onCharListLoading = () => {            // методо - індикатор дозагрузки персонажів , use 4 button off\n//         this.setState({\n//             newItemLoading: true\n//         })\n//     }\n\n//     onCharListLoaded = (newcharList) => {\n//         let ended = false;\n//         if (newcharList.length < 9) {\n//             ended = true;\n//         }\n\n//         this.setState(({ offset, charList }) => ({       //? повертаєм обєкт з цієї функції\n//             charList: [...charList, ...newcharList],     //? розгортаєм старі і дозагружені персонажі\n//             loading: false,\n//             newItemLoading: false,                       // включаєм кнопку після дозагрузки \n//             offset: offset + 9,                           //? зміщуєм діапазон дозагрузки персонажів     \n//             charEnded: ended\n//         }))\n//     }\n\n//     onError = () => {\n//         this.setState({\n//             loading: false,\n//             error: true\n//         })\n//     }\n\n//     selectItemStyle = (id) => {\n//         this.setState({\n//             styleSelect: id\n//         })\n//     }\n\n//     renderItems = (arr) => {\n\n//         const items = arr.map((item) => {\n//             let styleSelected = 'char__item ';\n//             if (this.state.styleSelect === item.key) {\n//                 styleSelected += \"char__item_selected\"\n//             }\n\n//             const checkCover = item.thumbnail.search('not_available') > 0 ? { objectFit: 'unset' } : null;\n//             return (\n//                 <li key={item.key}\n\n//                     className={styleSelected}\n//                     onClick={(e) => {\n//                         this.props.onCharSelected(item.key);\n//                         this.selectItemStyle(item.key)\n//                     }}\n//                     onFocus={() => {\n//                         this.selectItemStyle(item.key)\n//                         this.props.onCharSelected(item.key);\n//                     }}>\n\n//                     <img src={item.thumbnail} alt=\"abyss\" style={checkCover} />\n//                     <div className=\"char__name\"\n//                         tabIndex=\"99\">\n//                         {item.name}</div>\n//                 </li>\n//             )\n//         })\n\n//         return (\n//             <ul className=\"char__grid\">\n//                 {items}\n//             </ul>\n//         )\n//     }\n\n//     // __________________________________________________________________\n\n//     render() {\n//         const { charList, loading, error, offset, newItemLoading, charEnded } = this.state;\n\n//         const items = this.renderItems(charList);\n\n//         const spinner = loading ? <Spinner /> : null;\n//         const errorMassage = error ? <ErrorMessage /> : null;\n//         const content = !(loading || error) ? items : null;\n\n//         return (\n//             <div className=\"char__list\">\n//                 {spinner}\n//                 {errorMassage}\n//                 {content}\n\n//                 <button\n//                     className=\"button button__main button__long\"\n//                     disabled={newItemLoading}\n//                     style={{ 'display': charEnded ? 'none' : 'block' }}\n//                     onClick={() => this.onRequest(offset)}\n//                 >\n//                     <div className=\"inner\">load more</div>\n//                 </button>\n//             </div>\n//         )\n//     }\n// }\n\n// // валідація пропса onCharSelected на тип - функція та наявність в цілому\n// CharList.protoTypes = {\n//     onCharSelected: PropTypes.func.isRequired\n// }\n\n// export default CharList;\n\n","import './skeleton.scss';\n\nconst Skeleton = () => {\n    return (\n        <>\n            <p className=\"char__select\">Please select a character to see information</p>\n            <div className=\"skeleton\">\n                <div className=\"pulse skeleton__header\">\n                    <div className=\"pulse skeleton__circle\"></div>\n                    <div className=\"pulse skeleton__mini\"></div>\n                </div>\n                <div className=\"pulse skeleton__block\"></div>\n                <div className=\"pulse skeleton__block\"></div>\n                <div className=\"pulse skeleton__block\"></div>\n            </div>\n        </>\n    )\n}\n\nexport default Skeleton;","import { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\n\nimport useMarvelService from '../../services/MarvelService';\nimport Spinner from '../spinner/Spinner';\nimport ErrorMessage from '../errorMassage/ErrorMessage';\nimport Skeleton from '../skeleton/Skeleton';\n\nimport './charInfo.scss';\n\nconst CharInfo = (props) => {\n\n    const [char, setChar] = useState(null);\n\n    const { loading, error, getCharacter, clearError } = useMarvelService();\n\n    useEffect(() => {\n        updateChar()\n        // eslint-disable-next-line\n    }, [props.charId])\n\n\n    const updateChar = () => {\n        const { charId } = props;\n        if (!charId) {\n            return;\n        }\n        clearError();\n        getCharacter(charId)\n            .then(onCharLoaded)\n    }\n\n    const onCharLoaded = (char) => {          //! відповідає за кінцевий результат\n        setChar(char);\n    }\n\n    // _________________________________________________________\n\n    const skeleton = char || loading || error ? null : <Skeleton />;\n    const errorMassage = error ? <ErrorMessage /> : null;\n    const spinner = loading ? <Spinner /> : null;\n    const content = !(loading || error || !char) ? <View char={char} /> : null;\n\n    return (\n        <div className=\"char__info\" >\n            {skeleton}\n            {errorMassage}\n            {spinner}\n            {content}\n        </div>\n    )\n\n}\n\nconst View = ({ char }) => {\n    const { name, description, thumbnail, homepage, wiki, comics } = char;\n    const checkCover = thumbnail.search('not_available') > 0 ? { objectFit: 'contain' } : null;\n\n    return (\n        <>\n            <div className=\"char__basics\">\n                <img src={thumbnail} alt={name}\n                    style={checkCover} />\n                <div>\n                    <div className=\"char__info-name\">{name}</div>\n                    <div className=\"char__btns\">\n                        <a href={homepage} className=\"button button__main\">\n                            <div className=\"inner\">Homepage</div>\n                        </a>\n                        <a href={wiki} className=\"button button__secondary\">\n                            <div className=\"inner\">Wiki</div>\n                        </a>\n                    </div>\n                </div>\n            </div>\n            <div className=\"char__descr\">\n                {description}\n            </div>\n            <div className=\"char__comics\">Comics:</div>\n            <ul className=\"char__comics-list\">\n\n                {comics.length > 0 ? null : \"There is no comics with this characters\"}\n                {\n                    comics.map((item, i) => {\n                        // eslint-disable-next-line\n                        if (i > 9) return;\n                        return (\n                            <li key={i} className=\"char__comics-item\">\n                                {item.name}\n                            </li>\n                        )\n                    })\n                }\n            </ul>\n        </>\n    )\n}\n\nCharInfo.propTypes = {\n    charId: PropTypes.number\n}\n\nexport default CharInfo;\n\n","import { Component } from \"react\";\r\nimport ErrorMessage from \"../errorMassage/ErrorMessage\";\r\n\r\n\r\nclass ErrorBoundary extends Component {          //! клас запобіжник\r\n    state = {\r\n        error: false\r\n    }\r\n\r\n    // static getDerivedStateFromError(error) {  //! використовуєм якщо потрібно тільки обновити state\r\n    //     return { error: true }\r\n    // }\r\n\r\n    componentDidCatch(error, errorInfo) {\r\n        console.log(error, errorInfo);\r\n        this.setState({\r\n            error: true\r\n        })\r\n    }\r\n\r\n    render() {\r\n        if (this.state.error) {\r\n            return <ErrorMessage />       //! рендеримо повідомлення про помилку\r\n        }\r\n\r\n        return this.props.children;          //! рендеримо компонент якщо все гуд\r\n    }\r\n}\r\n\r\nexport default ErrorBoundary;","export default __webpack_public_path__ + \"static/media/vision.067d4ae1.png\";","import { useState } from \"react\";\r\n\r\nimport RandomChar from \"../randomChar/RandomChar\";\r\nimport CharList from \"../charList/CharList\";\r\nimport CharInfo from \"../charInfo/CharInfo\";\r\nimport ErrorBoundary from \"../errorBoundary/ErrorBoundary\";\r\n\r\nimport decoration from '../../resources/img/vision.png';\r\n\r\nconst MainPage = () => {\r\n\r\n\r\n    const [selectedChar, setChar] = useState();     //! стейт для підйому id\r\n\r\n    const onCharSelected = (id) => {               //! підйом id вибраного перса з CharList\r\n        setChar(id);\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <ErrorBoundary>\r\n                <RandomChar />\r\n            </ErrorBoundary>\r\n            <div className=\"char__content\">\r\n                <ErrorBoundary>\r\n                    <CharList onCharSelected={onCharSelected} />\r\n                </ErrorBoundary>\r\n                <ErrorBoundary>\r\n                    <CharInfo charId={selectedChar} />\r\n                </ErrorBoundary>\r\n            </div>\r\n\r\n            <img className=\"bg-decoration\" src={decoration} alt=\"vision\" />\r\n        </>\r\n    )\r\n\r\n}\r\n\r\nexport default MainPage;","import { useState, useEffect } from 'react';\nimport { Link } from 'react-router-dom';\n\nimport useMarvelService from '../../services/MarvelService';\nimport Spinner from '../spinner/Spinner';\nimport ErrorMessage from '../errorMassage/ErrorMessage';\n\nimport './comicsList.scss';\n\nconst ComicsList = () => {\n\n    const [comicsList, setComicsList] = useState([]);\n    const [newItemLoading, setnewItemLoading] = useState(false);\n    const [offset, setOffset] = useState(1);\n    const [comicsEnded, setComicsEnded] = useState(false);\n\n    const { loading, error, getAllComics } = useMarvelService();\n\n\n    useEffect(() => {\n        onRequest(offset, true);\n        // eslint-disable-next-line\n    }, [])\n\n    const onRequest = (offset, initial) => {\n        initial ? setnewItemLoading(false) : setnewItemLoading(true);\n        getAllComics(offset)\n            .then(onComicsListLoaded)\n    }\n\n    const onComicsListLoaded = (newComicsList) => {\n        let ended = false;\n        if (newComicsList.length < 8) {\n            ended = true;\n        }\n        setComicsList([...comicsList, ...newComicsList]);\n        setnewItemLoading(false);\n        setOffset(offset + 8);\n        setComicsEnded(ended);\n    }\n\n    function renderItems(arr) {\n        const items = arr.map((item) => {\n            return (\n                <li className=\"comics__item\" key={item.id}>\n                    <Link to={`/comics/${item.id}`}>\n                        <img src={item.thumbnail} alt={item.title} className=\"comics__item-img\" />\n                        <div className=\"comics__item-name\">{item.title}</div>\n                        <div className=\"comics__item-price\">{item.price}</div>\n                    </Link>\n                </li>\n            )\n        })\n\n        return (\n            <ul className=\"comics__grid\">\n                {items}\n            </ul>\n        )\n    }\n\n    const items = renderItems(comicsList);\n\n    const errorMessage = error ? <ErrorMessage /> : null;\n    const spinner = loading && !newItemLoading ? <Spinner /> : null;\n\n    return (\n        <div className=\"comics__list\">\n            {errorMessage}\n            {spinner}\n            {items}\n            <button\n                disabled={newItemLoading}\n                style={{ 'display': comicsEnded ? 'none' : 'block' }}\n                className=\"button button__main button__long\"\n                onClick={() => onRequest(offset)}>\n                <div className=\"inner\">load more</div>\n            </button>\n        </div>\n    )\n}\n\nexport default ComicsList;\n","export default __webpack_public_path__ + \"static/media/Avengers.4065c8f9.png\";","export default __webpack_public_path__ + \"static/media/Avengers_logo.9eaf2193.png\";","import './appBanner.scss';\nimport avengers from '../../resources/img/Avengers.png';\nimport avengersLogo from '../../resources/img/Avengers_logo.png';\n\nconst AppBanner = () => {\n    return (\n        <div className=\"app__banner\">\n            <img src={avengers} alt=\"Avengers\" />\n            <div className=\"app__banner-text\">\n                New comics every week!<br />\n                Stay tuned!\n            </div>\n            <img src={avengersLogo} alt=\"Avengers logo\" />\n        </div>\n    )\n}\n\nexport default AppBanner;","import ComicsList from \"../comicsList/ComicsList\";\r\nimport AppBanner from \"../appBanner/AppBanner\";\r\n\r\nconst ComicsPage = () => {\r\n\r\n    return (\r\n        <>\r\n            <AppBanner />\r\n            <ComicsList />\r\n        </>\r\n    )\r\n}\r\n\r\nexport default ComicsPage;","import { Link, NavLink } from 'react-router-dom';\n\nimport './appHeader.scss';\n\nconst AppHeader = () => {\n    return (\n        <header className=\"app__header\">\n            <h1 className=\"app__title\">\n                <Link to=\"/\">\n                    <span>Marvel</span> information portal\n                </Link>\n            </h1>\n            <nav className=\"app__menu\">\n                <ul>\n                    <li><NavLink\n                        end\n                        style={({ isActive }) => ({ color: isActive ? '#9f0013' : 'inherit' })}\n                        to=\"/\">Characters</NavLink></li>\n\n                    <li><NavLink\n                        style={({ isActive }) => ({ color: isActive ? '#9f0013' : 'inherit' })}\n                        to=\"/comics\">Comics</NavLink></li>\n                </ul>\n            </nav>\n        </header>\n    )\n}\n\nexport default AppHeader;","\nimport { BrowserRouter as Router, Route, Routes } from 'react-router-dom';\n\nimport { MainPage, ComicsPage, Page404, SingleComicPage } from '../pages';\nimport AppHeader from \"../appHeader/AppHeader\";\n\n\n\nconst App = () => {\n\n    return (\n        <Router>\n            <div className=\"app\">\n                <AppHeader />\n                <main>\n\n                    <Routes>\n                        <Route path=\"/\" element={<MainPage />} />\n                        <Route path=\"/comics\" element={<ComicsPage />} />\n                        {/* <Route path=\"/comics/:comicId\" element={<SingleComicPage />} /> */}\n                        {/* <Route path=\"*\" element={<Page404 />} /> */}\n                    </Routes>\n\n                </main>\n            </div>\n        </Router >\n    )\n}\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/app/App';\n\nimport './style/style.scss';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}