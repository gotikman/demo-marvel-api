{"version":3,"sources":["components/appHeader/AppHeader.js","components/spinner/Spinner.js","components/errorMassage/error.gif","components/errorMassage/ErrorMessage.js","services/MarvelService.js","resources/img/mjolnir.png","components/randomChar/RandomChar.js","components/charList/CharList.js","components/skeleton/Skeleton.js","components/charInfo/CharInfo.js","components/errorBoundary/ErrorBoundary.js","resources/img/vision.png","components/app/App.js","index.js"],"names":["AppHeader","className","href","Spinner","xmlns","style","margin","background","display","width","height","viewBox","preserveAspectRatio","transform","cx","cy","r","fill","fillOpacity","attributeName","type","begin","values","keyTimes","dur","repeatCount","ErrorMessage","src","img","objectFit","alt","MarvelService","_apiBase","_apiKey","_baseOffset","getResource","url","a","fetch","res","ok","Error","status","json","getAllCharacters","offset","data","results","map","_transformCharacter","getCharacter","id","char","name","description","slice","thumbnail","path","extension","homepage","urls","wiki","key","comics","items","View","checkCover","search","RandomChar","useState","setChar","loading","setLoading","error","setError","marvelServise","useEffect","updateChar","timirId","setInterval","clearInterval","onCharLoaded","onError","console","log","Math","floor","random","then","catch","errorMessage","spinner","content","onClick","mjolnir","CharList","props","charList","setCharList","newItemLoading","setNewItemLoading","setOffset","charEnded","setCharEnded","onRequest","onCharListLoading","onCharListLoaded","newcharList","ended","length","itemRefs","useRef","focusOnItem","current","forEach","item","classList","remove","add","focus","arr","i","tabIndex","ref","el","onCharSelected","onKeyPress","e","renderItems","errorMassage","disabled","protoTypes","PropTypes","func","isRequired","Skeleton","CharInfo","charId","onCharLoading","skeleton","ErrorBoundary","state","errorInfo","this","setState","children","Component","App","selectedChar","decoration","ReactDOM","render","StrictMode","document","getElementById"],"mappings":";iSAqBeA,EAnBG,WACd,OACI,yBAAQC,UAAU,cAAlB,UACI,oBAAIA,UAAU,aAAd,SACI,oBAAGC,KAAK,QAAR,UACI,0CADJ,2BAIJ,qBAAKD,UAAU,YAAf,SACI,+BACI,6BAAI,mBAAGC,KAAK,QAAR,0BADR,IAGI,6BAAI,mBAAGA,KAAK,QAAR,+BCkDTC,EAhEC,WACZ,OACI,sBAAKC,MAAM,6BAA6BC,MAAO,CAAEC,OAAQ,SAAUC,WAAY,OAAQC,QAAS,SAAWC,MAAM,QAAQC,OAAO,QAAQC,QAAQ,cAAcC,oBAAoB,WAAlL,UACI,mBAAGC,UAAU,mBAAb,SACI,mBAAGA,UAAU,YAAb,SACI,yBAAQC,GAAG,IAAIC,GAAG,IAAIC,EAAE,IAAIC,KAAK,UAAUC,YAAY,IAAvD,UACI,kCAAkBC,cAAc,YAAYC,KAAK,QAAQC,MAAM,UAAUC,OAAO,cAAcC,SAAS,MAAMC,IAAI,KAAKC,YAAY,eAClI,yBAASN,cAAc,cAAcI,SAAS,MAAMC,IAAI,KAAKC,YAAY,aAAaH,OAAO,MAAMD,MAAM,mBAGjH,mBAAGR,UAAU,iDAAb,SACA,mBAAGA,UAAU,aAAb,SACI,yBAAQC,GAAG,IAAIC,GAAG,IAAIC,EAAE,IAAIC,KAAK,UAAUC,YAAY,QAAvD,UACI,kCAAkBC,cAAc,YAAYC,KAAK,QAAQC,MAAM,SAASC,OAAO,cAAcC,SAAS,MAAMC,IAAI,KAAKC,YAAY,eACjI,yBAASN,cAAc,cAAcI,SAAS,MAAMC,IAAI,KAAKC,YAAY,aAAaH,OAAO,MAAMD,MAAM,kBAGjH,mBAAGR,UAAU,mBAAb,SACA,mBAAGA,UAAU,aAAb,SACI,yBAAQC,GAAG,IAAIC,GAAG,IAAIC,EAAE,IAAIC,KAAK,UAAUC,YAAY,OAAvD,UACI,kCAAkBC,cAAc,YAAYC,KAAK,QAAQC,MAAM,UAAUC,OAAO,cAAcC,SAAS,MAAMC,IAAI,KAAKC,YAAY,eAClI,yBAASN,cAAc,cAAcI,SAAS,MAAMC,IAAI,KAAKC,YAAY,aAAaH,OAAO,MAAMD,MAAM,mBAGjH,mBAAGR,UAAU,kDAAb,SACA,mBAAGA,UAAU,cAAb,SACI,yBAAQC,GAAG,IAAIC,GAAG,IAAIC,EAAE,IAAIC,KAAK,UAAUC,YAAY,QAAvD,UACI,kCAAkBC,cAAc,YAAYC,KAAK,QAAQC,MAAM,QAAQC,OAAO,cAAcC,SAAS,MAAMC,IAAI,KAAKC,YAAY,eAChI,yBAASN,cAAc,cAAcI,SAAS,MAAMC,IAAI,KAAKC,YAAY,aAAaH,OAAO,MAAMD,MAAM,iBAGjH,mBAAGR,UAAU,kCAAb,SACA,mBAAGA,UAAU,cAAb,SACI,yBAAQC,GAAG,IAAIC,GAAG,IAAIC,EAAE,IAAIC,KAAK,UAAUC,YAAY,MAAvD,UACI,kCAAkBC,cAAc,YAAYC,KAAK,QAAQC,MAAM,UAAUC,OAAO,cAAcC,SAAS,MAAMC,IAAI,KAAKC,YAAY,eAClI,yBAASN,cAAc,cAAcI,SAAS,MAAMC,IAAI,KAAKC,YAAY,aAAaH,OAAO,MAAMD,MAAM,mBAGjH,mBAAGR,UAAU,kDAAb,SACA,mBAAGA,UAAU,cAAb,SACI,yBAAQC,GAAG,IAAIC,GAAG,IAAIC,EAAE,IAAIC,KAAK,UAAUC,YAAY,QAAvD,UACI,kCAAkBC,cAAc,YAAYC,KAAK,QAAQC,MAAM,SAASC,OAAO,cAAcC,SAAS,MAAMC,IAAI,KAAKC,YAAY,eACjI,yBAASN,cAAc,cAAcI,SAAS,MAAMC,IAAI,KAAKC,YAAY,aAAaH,OAAO,MAAMD,MAAM,kBAGjH,mBAAGR,UAAU,kCAAb,SACA,mBAAGA,UAAU,cAAb,SACI,yBAAQC,GAAG,IAAIC,GAAG,IAAIC,EAAE,IAAIC,KAAK,UAAUC,YAAY,OAAvD,UACI,kCAAkBC,cAAc,YAAYC,KAAK,QAAQC,MAAM,UAAUC,OAAO,cAAcC,SAAS,MAAMC,IAAI,KAAKC,YAAY,eAClI,yBAASN,cAAc,cAAcI,SAAS,MAAMC,IAAI,KAAKC,YAAY,aAAaH,OAAO,MAAMD,MAAM,mBAGjH,mBAAGR,UAAU,iDAAb,SACA,mBAAGA,UAAU,cAAb,SACI,yBAAQC,GAAG,IAAIC,GAAG,IAAIC,EAAE,IAAIC,KAAK,UAAUC,YAAY,QAAvD,UACI,kCAAkBC,cAAc,YAAYC,KAAK,QAAQC,MAAM,KAAKC,OAAO,cAAcC,SAAS,MAAMC,IAAI,KAAKC,YAAY,eAC7H,yBAASN,cAAc,cAAcI,SAAS,MAAMC,IAAI,KAAKC,YAAY,aAAaH,OAAO,MAAMD,MAAM,kBCxDlH,MAA0B,kCCY1BK,EAVM,WACjB,OACI,qBACIC,IAAKC,EACLvB,MAAO,CAAEG,QAAS,QAASC,MAAO,QAASC,OAAQ,QAASmB,UAAW,UAAWvB,OAAQ,UAC1FwB,IAAI,W,8BCqCDC,E,iDA1CXC,SAAW,4C,KACXC,QAAU,0C,KACVC,YAAc,I,KAEdC,Y,uCAAc,WAAOC,GAAP,eAAAC,EAAA,sEACMC,MAAMF,GADZ,WACNG,EADM,QAIDC,GAJC,sBAKA,IAAIC,MAAJ,0BAA6BL,EAA7B,qBAA6CG,EAAIG,SALjD,uBAQGH,EAAII,OARP,mF,2DAWdC,iB,sBAAmB,0CAAAP,EAAA,6DAAOQ,EAAP,+BAAgB,EAAKX,YAArB,SACG,EAAKC,YAAL,UAAoB,EAAKH,SAAzB,qCAA8Da,EAA9D,YAAwE,EAAKZ,UADhF,cACTM,EADS,yBAERA,EAAIO,KAAKC,QAAQC,IAAI,EAAKC,sBAFlB,2C,KAKnBC,a,uCAAe,WAAOC,GAAP,eAAAd,EAAA,sEACO,EAAKF,YAAL,UAAoB,EAAKH,SAAzB,sBAA+CmB,EAA/C,YAAqD,EAAKlB,UADjE,cACLM,EADK,yBAEJ,EAAKU,oBAAoBV,EAAIO,KAAKC,QAAQ,KAFtC,2C,2DAMfE,oBAAsB,SAACG,GACnB,MAAO,CACHC,KAAMD,EAAKC,KACXC,YAAaF,EAAKE,YAAL,UAAsBF,EAAKE,YAAYC,MAAM,EAAG,KAAhD,OAA4D,UACzEC,UAAWJ,EAAKI,UAAUC,KAAO,IAAML,EAAKI,UAAUE,UACtDC,SAAUP,EAAKQ,KAAK,GAAGxB,IACvByB,KAAMT,EAAKQ,KAAK,GAAGxB,IACnB0B,IAAKV,EAAKD,GACVY,OAAQX,EAAKW,OAAOC,SCpCjB,G,MAAA,IAA0B,qCC+EnCC,EAAO,SAAC,GAAc,IAAZb,EAAW,EAAXA,KACJC,EAAiDD,EAAjDC,KAAMC,EAA2CF,EAA3CE,YAAaE,EAA8BJ,EAA9BI,UAAWG,EAAmBP,EAAnBO,SAAUE,EAAST,EAATS,KAE1CK,EAAaV,EAAUW,OAAO,iBAAmB,EAAI,CAAEtC,UAAW,WAAc,KAEtF,OACI,sBAAK5B,UAAU,oBAAf,UACI,qBAAK0B,IAAK6B,EAAW1B,IAAI,mBAAmB7B,UAAU,kBAClDI,MAAO6D,IACX,sBAAKjE,UAAU,mBAAf,UACI,mBAAGA,UAAU,mBAAb,SAAiCoD,IACjC,mBAAGpD,UAAU,oBAAb,SAAkCqD,IAElC,sBAAKrD,UAAU,mBAAf,UACI,mBAAGC,KAAMyD,EAAU1D,UAAU,sBAA7B,SACI,qBAAKA,UAAU,QAAf,wBAEJ,mBAAGC,KAAM2D,EAAM5D,UAAU,2BAAzB,SACI,qBAAKA,UAAU,QAAf,8BAQTmE,EAjGI,WAEf,MAAwBC,mBAAS,IAAjC,mBAAOjB,EAAP,KAAakB,EAAb,KACA,EAA8BD,oBAAS,GAAvC,mBAAOE,EAAP,KAAgBC,EAAhB,KACA,EAA0BH,oBAAS,GAAnC,mBAAOI,EAAP,KAAcC,EAAd,KAEMC,EAAgB,IAAI5C,EAE1B6C,qBAAU,WACNC,IACA,IAAMC,EAAUC,YAAYF,EAAY,KAExC,OAAO,WACHG,cAAcF,MAInB,IAEH,IAAMG,EAAe,SAAC7B,GAClBkB,EAAQlB,GACRoB,GAAW,IAOTU,EAAU,WACZV,GAAW,GACXE,GAAS,IAGPG,EAAa,WACfM,QAAQC,IAAI,iBACZ,IAAMjC,EAAKkC,KAAKC,MAAM,IAAAD,KAAKE,SAAiC,QAV5Df,GAAW,GAYXG,EACKzB,aAAaC,GACbqC,KAAKP,GACLQ,MAAMP,IAGTQ,EAAejB,EAAQ,cAAC,EAAD,IAAmB,KAC1CkB,EAAUpB,EAAU,cAAC,EAAD,IAAc,KAClCqB,EAAYrB,GAAWE,IAAUrB,EAA+B,KAAvB,cAAC,EAAD,CAAMA,KAAMA,IAE3D,OACI,sBAAKnD,UAAU,aAAf,UACKyF,EACAC,EACAC,EACD,sBAAK3F,UAAU,qBAAf,UACI,oBAAGA,UAAU,oBAAb,wCAC+B,uBAD/B,4CAIA,mBAAGA,UAAU,oBAAb,mCAGA,wBAAQA,UAAU,sBACd4F,QAAShB,EADb,SAEI,qBAAK5E,UAAU,QAAf,sBAEJ,qBAAK0B,IAAKmE,EAAShE,IAAI,UAAU7B,UAAU,kC,wBChErD8F,G,MAAW,SAACC,GAEd,MAAgC3B,mBAAS,IAAzC,mBAAO4B,EAAP,KAAiBC,EAAjB,KACA,EAA8B7B,oBAAS,GAAvC,mBAAOE,EAAP,KAAgBC,EAAhB,KACA,EAA0BH,oBAAS,GAAnC,mBAAOI,EAAP,KAAcC,EAAd,KACA,EAA4CL,oBAAS,GAArD,mBAAO8B,EAAP,KAAuBC,EAAvB,KACA,EAA4B/B,mBAAS,KAArC,mBAAOxB,EAAP,KAAewD,EAAf,KACA,EAAkChC,oBAAS,GAA3C,mBAAOiC,EAAP,KAAkBC,EAAlB,KAEM5B,EAAgB,IAAI5C,EAE1B6C,qBAAU,WACN4B,MAED,IAEH,IAAMA,EAAY,SAAC3D,GACf4D,IACA9B,EACK/B,iBAAiBC,GACjB2C,KAAKkB,GACLjB,MAAMP,IAGTuB,EAAoB,WACtBL,GAAkB,IAGhBM,EAAmB,SAACC,GACtB,IAAIC,GAAQ,EACRD,EAAYE,OAAS,IACrBD,GAAQ,GAGZV,GAAY,SAAAD,GAAQ,4BAAQA,GAAR,YAAqBU,OACzCnC,GAAW,SAAAD,GAAO,OAAI,KACtB6B,GAAkB,SAAAD,GAAc,OAAI,KACpCE,GAAU,SAAAxD,GAAM,OAAIA,EAAS,KAC7B0D,GAAa,SAAAD,GAAS,OAAIM,MAGxB1B,EAAU,WACZR,GAAS,GACTF,GAAW,IAITsC,EAAWC,iBAAO,IAElBC,EAAc,SAAC7D,GACjB2D,EAASG,QAAQC,SAAQ,SAAAC,GAAI,OAAIA,EAAKC,UAAUC,OAAO,0BACvDP,EAASG,QAAQ9D,GAAIiE,UAAUE,IAAI,uBACnCR,EAASG,QAAQ9D,GAAIoE,SAyCzB,IAAMvD,EArCN,SAAqBwD,GACjB,IAAMxD,EAAQwD,EAAIxE,KAAI,SAACmE,EAAMM,GACzB,IAAMvD,EAAaiD,EAAK3D,UAAUW,OAAO,iBAAmB,EAAI,CAAEtC,UAAW,SAAY,KACzF,OACI,qBACI5B,UAAU,aACVyH,SAAU,EACVC,IAAK,SAAAC,GAAE,OAAId,EAASG,QAAQQ,GAAKG,GAEjC/B,QAAS,WACLG,EAAM6B,eAAeV,EAAKrD,KAC1BkD,EAAYS,IAEhBK,WAAY,SAACC,GACK,MAAVA,EAAEjE,KAAyB,UAAViE,EAAEjE,MACnBkC,EAAM6B,eAAeV,EAAKrD,KAC1BkD,EAAYS,KAZxB,UAiBI,qBAAK9F,IAAKwF,EAAK3D,UAAW1B,IAAI,QAAQzB,MAAO6D,IAC7C,qBAAKjE,UAAU,aAAf,SAA6BkH,EAAK9D,SAd7B8D,EAAKrD,QAmBtB,OACI,oBAAI7D,UAAU,aAAd,SACK+D,IAQCgE,CAAY/B,GAEpBN,EAAUpB,EAAU,cAAC,EAAD,IAAc,KAClC0D,EAAexD,EAAQ,cAAC,EAAD,IAAmB,KAC1CmB,EAAYrB,GAAWE,EAAiB,KAART,EAEtC,OACI,sBAAK/D,UAAU,aAAf,UACK0F,EACAsC,EACArC,EAED,wBACI3F,UAAU,mCACViI,SAAU/B,EACV9F,MAAO,CAAE,QAAWiG,EAAY,OAAS,SACzCT,QAAS,kBAAMW,EAAU3D,IAJ7B,SAMI,qBAAK5C,UAAU,QAAf,8BAQhB8F,EAASoC,WAAa,CAClBN,eAAgBO,IAAUC,KAAKC,YAGpBvC,QChHAwC,G,MAjBE,WACb,OACI,qCACI,mBAAGtI,UAAU,eAAb,0DACA,sBAAKA,UAAU,WAAf,UACI,sBAAKA,UAAU,yBAAf,UACI,qBAAKA,UAAU,2BACf,qBAAKA,UAAU,4BAEnB,qBAAKA,UAAU,0BACf,qBAAKA,UAAU,0BACf,qBAAKA,UAAU,kCC0DzBgE,G,MAAO,SAAC,GAAc,IAAZb,EAAW,EAAXA,KACJC,EAAyDD,EAAzDC,KAAMC,EAAmDF,EAAnDE,YAAaE,EAAsCJ,EAAtCI,UAAWG,EAA2BP,EAA3BO,SAAUE,EAAiBT,EAAjBS,KAAME,EAAWX,EAAXW,OAChDG,EAAaV,EAAUW,OAAO,iBAAmB,EAAI,CAAEtC,UAAW,WAAc,KAEtF,OACI,qCACI,sBAAK5B,UAAU,eAAf,UACI,qBAAK0B,IAAK6B,EAAW1B,IAAKuB,EACtBhD,MAAO6D,IACX,gCACI,qBAAKjE,UAAU,kBAAf,SAAkCoD,IAClC,sBAAKpD,UAAU,aAAf,UACI,mBAAGC,KAAMyD,EAAU1D,UAAU,sBAA7B,SACI,qBAAKA,UAAU,QAAf,wBAEJ,mBAAGC,KAAM2D,EAAM5D,UAAU,2BAAzB,SACI,qBAAKA,UAAU,QAAf,6BAKhB,qBAAKA,UAAU,cAAf,SACKqD,IAEL,qBAAKrD,UAAU,eAAf,qBACA,qBAAIA,UAAU,oBAAd,UAEK8D,EAAO8C,OAAS,EAAI,KAAO,0CAExB9C,EAAOf,KAAI,SAACmE,EAAMM,GAEd,KAAIA,EAAI,GACR,OACI,oBAAYxH,UAAU,oBAAtB,SACKkH,EAAK9D,MADDoE,cAetBe,EA7GE,SAACxC,GAEd,MAAwB3B,mBAAS,MAAjC,mBAAOjB,EAAP,KAAakB,EAAb,KACA,EAA8BD,oBAAS,GAAvC,mBAAOE,EAAP,KAAgBC,EAAhB,KACA,EAA0BH,oBAAS,GAAnC,mBAAOI,EAAP,KAAcC,EAAd,KAEMC,EAAgB,IAAI5C,EAE1B6C,qBAAU,WACNO,QAAQC,IAAI,oBACZP,MAED,CAACmB,EAAMyC,SAGV,IAAM5D,EAAa,WACf,IAAQ4D,EAAWzC,EAAXyC,OACHA,IAILC,IAEA/D,EACKzB,aAAauF,GACbjD,KAAKP,GACLQ,MAAMP,KAGTD,EAAe,SAAC7B,GAClBkB,EAAQlB,GACRoB,GAAW,IAGTkE,EAAgB,WAClBlE,GAAW,IAGTU,EAAU,WACZV,GAAW,GACXE,GAAS,IAKPiE,EAAWvF,GAAQmB,GAAWE,EAAQ,KAAO,cAAC,EAAD,IAC7CwD,EAAexD,EAAQ,cAAC,EAAD,IAAmB,KAC1CkB,EAAUpB,EAAU,cAAC,EAAD,IAAc,KAClCqB,EAAYrB,GAAWE,IAAUrB,EAA+B,KAAvB,cAAC,EAAD,CAAMA,KAAMA,IAE3D,OACI,sBAAKnD,UAAU,aAAf,UACK0I,EACAV,EACAtC,EACAC,M,wBCpCEgD,E,4MAxBXC,MAAQ,CACJpE,OAAO,G,uDAOX,SAAkBA,EAAOqE,GACrB3D,QAAQC,IAAIX,EAAOqE,GACnBC,KAAKC,SAAS,CACVvE,OAAO,M,oBAIf,WACI,OAAIsE,KAAKF,MAAMpE,MACJ,cAAC,EAAD,IAGJsE,KAAK/C,MAAMiD,a,GArBEC,aCJb,MAA0B,mCCwC1BC,EA7BH,WAER,MAAgC9E,qBAAhC,mBAAO+E,EAAP,KAAqB9E,EAArB,KAMA,OACI,sBAAKrE,UAAU,MAAf,UACI,cAAC,EAAD,IACA,iCACI,cAAC,EAAD,UACI,cAAC,EAAD,MAEJ,sBAAKA,UAAU,gBAAf,UACI,cAAC,EAAD,UACI,cAAC,EAAD,CAAU4H,eAbP,SAAC1E,GACpBmB,EAAQnB,QAcI,cAAC,EAAD,UACI,cAAC,EAAD,CAAUsF,OAAQW,SAG1B,qBAAKnJ,UAAU,gBAAgB0B,IAAK0H,EAAYvH,IAAI,kB,MC5BpEwH,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.19be9f81.chunk.js","sourcesContent":["import './appHeader.scss';\n\nconst AppHeader = () => {\n    return (\n        <header className=\"app__header\">\n            <h1 className=\"app__title\">\n                <a href=\"#temp\">\n                    <span>Marvel</span> information portal\n                </a>\n            </h1>\n            <nav className=\"app__menu\">\n                <ul>\n                    <li><a href=\"#temp\">Characters</a></li>\n                    /\n                    <li><a href=\"#temp\">Comics</a></li>\n                </ul>\n            </nav>\n        </header>\n    )\n}\n\nexport default AppHeader;","const Spinner = () => {\n    return (\n        <svg xmlns=\"http://www.w3.org/2000/svg\" style={{ margin: '0 auto', background: 'none', display: 'block' }} width=\"200px\" height=\"200px\" viewBox=\"0 0 100 100\" preserveAspectRatio=\"xMidYMid\">\n            <g transform=\"translate(80,50)\">\n                <g transform=\"rotate(0)\">\n                    <circle cx=\"0\" cy=\"0\" r=\"7\" fill=\"#1c4595\" fillOpacity=\"1\">\n                        <animateTransform attributeName=\"transform\" type=\"scale\" begin=\"-0.875s\" values=\"1.5 1.5;1 1\" keyTimes=\"0;1\" dur=\"1s\" repeatCount=\"indefinite\"></animateTransform>\n                        <animate attributeName=\"fillOpacity\" keyTimes=\"0;1\" dur=\"1s\" repeatCount=\"indefinite\" values=\"1;0\" begin=\"-0.875s\"></animate>\n                    </circle>\n                </g>\n            </g><g transform=\"translate(71.21320343559643,71.21320343559643)\">\n                <g transform=\"rotate(45)\">\n                    <circle cx=\"0\" cy=\"0\" r=\"7\" fill=\"#1c4595\" fillOpacity=\"0.875\">\n                        <animateTransform attributeName=\"transform\" type=\"scale\" begin=\"-0.75s\" values=\"1.5 1.5;1 1\" keyTimes=\"0;1\" dur=\"1s\" repeatCount=\"indefinite\"></animateTransform>\n                        <animate attributeName=\"fillOpacity\" keyTimes=\"0;1\" dur=\"1s\" repeatCount=\"indefinite\" values=\"1;0\" begin=\"-0.75s\"></animate>\n                    </circle>\n                </g>\n            </g><g transform=\"translate(50,80)\">\n                <g transform=\"rotate(90)\">\n                    <circle cx=\"0\" cy=\"0\" r=\"7\" fill=\"#1c4595\" fillOpacity=\"0.75\">\n                        <animateTransform attributeName=\"transform\" type=\"scale\" begin=\"-0.625s\" values=\"1.5 1.5;1 1\" keyTimes=\"0;1\" dur=\"1s\" repeatCount=\"indefinite\"></animateTransform>\n                        <animate attributeName=\"fillOpacity\" keyTimes=\"0;1\" dur=\"1s\" repeatCount=\"indefinite\" values=\"1;0\" begin=\"-0.625s\"></animate>\n                    </circle>\n                </g>\n            </g><g transform=\"translate(28.786796564403577,71.21320343559643)\">\n                <g transform=\"rotate(135)\">\n                    <circle cx=\"0\" cy=\"0\" r=\"7\" fill=\"#1c4595\" fillOpacity=\"0.625\">\n                        <animateTransform attributeName=\"transform\" type=\"scale\" begin=\"-0.5s\" values=\"1.5 1.5;1 1\" keyTimes=\"0;1\" dur=\"1s\" repeatCount=\"indefinite\"></animateTransform>\n                        <animate attributeName=\"fillOpacity\" keyTimes=\"0;1\" dur=\"1s\" repeatCount=\"indefinite\" values=\"1;0\" begin=\"-0.5s\"></animate>\n                    </circle>\n                </g>\n            </g><g transform=\"translate(20,50.00000000000001)\">\n                <g transform=\"rotate(180)\">\n                    <circle cx=\"0\" cy=\"0\" r=\"7\" fill=\"#1c4595\" fillOpacity=\"0.5\">\n                        <animateTransform attributeName=\"transform\" type=\"scale\" begin=\"-0.375s\" values=\"1.5 1.5;1 1\" keyTimes=\"0;1\" dur=\"1s\" repeatCount=\"indefinite\"></animateTransform>\n                        <animate attributeName=\"fillOpacity\" keyTimes=\"0;1\" dur=\"1s\" repeatCount=\"indefinite\" values=\"1;0\" begin=\"-0.375s\"></animate>\n                    </circle>\n                </g>\n            </g><g transform=\"translate(28.78679656440357,28.786796564403577)\">\n                <g transform=\"rotate(225)\">\n                    <circle cx=\"0\" cy=\"0\" r=\"7\" fill=\"#1c4595\" fillOpacity=\"0.375\">\n                        <animateTransform attributeName=\"transform\" type=\"scale\" begin=\"-0.25s\" values=\"1.5 1.5;1 1\" keyTimes=\"0;1\" dur=\"1s\" repeatCount=\"indefinite\"></animateTransform>\n                        <animate attributeName=\"fillOpacity\" keyTimes=\"0;1\" dur=\"1s\" repeatCount=\"indefinite\" values=\"1;0\" begin=\"-0.25s\"></animate>\n                    </circle>\n                </g>\n            </g><g transform=\"translate(49.99999999999999,20)\">\n                <g transform=\"rotate(270)\">\n                    <circle cx=\"0\" cy=\"0\" r=\"7\" fill=\"#1c4595\" fillOpacity=\"0.25\">\n                        <animateTransform attributeName=\"transform\" type=\"scale\" begin=\"-0.125s\" values=\"1.5 1.5;1 1\" keyTimes=\"0;1\" dur=\"1s\" repeatCount=\"indefinite\"></animateTransform>\n                        <animate attributeName=\"fillOpacity\" keyTimes=\"0;1\" dur=\"1s\" repeatCount=\"indefinite\" values=\"1;0\" begin=\"-0.125s\"></animate>\n                    </circle>\n                </g>\n            </g><g transform=\"translate(71.21320343559643,28.78679656440357)\">\n                <g transform=\"rotate(315)\">\n                    <circle cx=\"0\" cy=\"0\" r=\"7\" fill=\"#1c4595\" fillOpacity=\"0.125\">\n                        <animateTransform attributeName=\"transform\" type=\"scale\" begin=\"0s\" values=\"1.5 1.5;1 1\" keyTimes=\"0;1\" dur=\"1s\" repeatCount=\"indefinite\"></animateTransform>\n                        <animate attributeName=\"fillOpacity\" keyTimes=\"0;1\" dur=\"1s\" repeatCount=\"indefinite\" values=\"1;0\" begin=\"0s\"></animate>\n                    </circle>\n                </g>\n            </g>\n        </svg>\n    )\n}\n\nexport default Spinner;","export default __webpack_public_path__ + \"static/media/error.42292aa1.gif\";","import img from './error.gif';\r\n\r\nconst ErrorMessage = () => {\r\n    return (\r\n        <img\r\n            src={img}\r\n            style={{ display: 'block', width: \"250px\", height: \"250px\", objectFit: 'contain', margin: \"0 auto\" }}\r\n            alt='Error'\r\n        />\r\n    )\r\n}\r\n\r\nexport default ErrorMessage;","\r\nclass MarvelService {\r\n    _apiBase = 'https://gateway.marvel.com:443/v1/public/';\r\n    _apiKey = 'apikey=663b4a9becd98b0462ce0969a62eb013';\r\n    _baseOffset = 210;\r\n\r\n    getResource = async (url) => {\r\n        let res = await fetch(url);           // чекаєм і отримуєм promise дані по запросу\r\n\r\n        // Обробка ситуації з помилкою в запросі fetch\r\n        if (!res.ok) {\r\n            throw new Error(`Could not fetch ${url}, status: ${res.status}`);\r\n        }\r\n\r\n        return await res.json();                // трансформ. в promise JS обєкт для подальшого викор.\r\n    }\r\n\r\n    getAllCharacters = async (offset = this._baseOffset) => {   // offset по замовчуванню якщо не передається\r\n        const res = await this.getResource(`${this._apiBase}characters?limit=9&offset=${offset}&${this._apiKey}`);\r\n        return res.data.results.map(this._transformCharacter);\r\n    }\r\n\r\n    getCharacter = async (id) => {\r\n        const res = await this.getResource(`${this._apiBase}characters/${id}?${this._apiKey}`);\r\n        return this._transformCharacter(res.data.results[0]);\r\n    }\r\n\r\n    //! метод повертає обєкт від API тільки з потрібними полями\r\n    _transformCharacter = (char) => {\r\n        return {\r\n            name: char.name,\r\n            description: char.description ? `${char.description.slice(0, 210)}...` : 'No data',\r\n            thumbnail: char.thumbnail.path + '.' + char.thumbnail.extension,\r\n            homepage: char.urls[0].url,\r\n            wiki: char.urls[1].url,\r\n            key: char.id,\r\n            comics: char.comics.items\r\n        }\r\n    }\r\n\r\n}\r\n\r\n//! провірка Сервісу http://prntscr.com/22qy9a6\r\n\r\nexport default MarvelService;","export default __webpack_public_path__ + \"static/media/mjolnir.61f31e18.png\";","import { useState, useEffect } from \"react\";\nimport Spinner from \"../spinner/Spinner\";\nimport ErrorMessage from \"../errorMassage/ErrorMessage\";\nimport MarvelService from \"../../services/MarvelService\";\n\nimport './randomChar.scss';\nimport mjolnir from '../../resources/img/mjolnir.png';\n\nconst RandomChar = () => {\n\n    const [char, setChar] = useState({});\n    const [loading, setLoading] = useState(true);\n    const [error, setError] = useState(false);\n\n    const marvelServise = new MarvelService();\n\n    useEffect(() => {\n        updateChar();\n        const timirId = setInterval(updateChar, 6000)\n\n        return () => {\n            clearInterval(timirId)\n        }\n\n        // eslint-disable-next-line\n    }, [])\n\n    const onCharLoaded = (char) => {          //! відповідає за кінцевий результат\n        setChar(char);\n        setLoading(false)\n    }\n\n    const onCharLoading = () => {          //! відповідає за проміжний результат\n        setLoading(true)\n    }\n\n    const onError = () => {\n        setLoading(false);\n        setError(true)\n    }\n\n    const updateChar = () => {\n        console.log('updateChar fn');\n        const id = Math.floor(Math.random() * (1011400 - 1011000) + 1011000);\n        onCharLoading();                  //!Спінер перед запросом та загрузкою перса.\n        marvelServise\n            .getCharacter(id)\n            .then(onCharLoaded)\n            .catch(onError)\n    }\n\n    const errorMessage = error ? <ErrorMessage /> : null;\n    const spinner = loading ? <Spinner /> : null;\n    const content = !(loading || error || !char) ? <View char={char} /> : null;\n\n    return (\n        <div className=\"randomchar\">\n            {errorMessage}\n            {spinner}\n            {content}\n            <div className=\"randomchar__static\">\n                <p className=\"randomchar__title\">\n                    Random character for today!<br />\n                    Do you want to get to know him better?\n                </p>\n                <p className=\"randomchar__title\">\n                    Or choose another one\n                </p>\n                <button className=\"button button__main\"\n                    onClick={updateChar}>\n                    <div className=\"inner\">try it</div>\n                </button>\n                <img src={mjolnir} alt=\"mjolnir\" className=\"randomchar__decoration\" />\n            </div>\n        </div>\n    )\n\n}\n\nconst View = ({ char }) => {\n    const { name, description, thumbnail, homepage, wiki } = char;\n\n    const checkCover = thumbnail.search('not_available') > 0 ? { objectFit: 'contain' } : null;\n\n    return (\n        <div className=\"randomchar__block\">\n            <img src={thumbnail} alt=\"Random character\" className=\"randomchar__img\"\n                style={checkCover} />\n            <div className=\"randomchar__info\">\n                <p className=\"randomchar__name\">{name}</p>\n                <p className=\"randomchar__descr\">{description}\n                </p>\n                <div className=\"randomchar__btns\">\n                    <a href={homepage} className=\"button button__main\">\n                        <div className=\"inner\">homepage</div>\n                    </a>\n                    <a href={wiki} className=\"button button__secondary\">\n                        <div className=\"inner\">Wiki</div>\n                    </a>\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default RandomChar;\n\n","import { useState, useEffect, useRef } from 'react';\nimport PropTypes from 'prop-types';\n\nimport Spinner from '../spinner/Spinner';\nimport ErrorMessage from '../errorMassage/ErrorMessage';\nimport MarvelService from '../../services/MarvelService';\nimport './charList.scss';\n\nconst CharList = (props) => {\n\n    const [charList, setCharList] = useState([]);\n    const [loading, setLoading] = useState(true);\n    const [error, setError] = useState(false);\n    const [newItemLoading, setNewItemLoading] = useState(false);\n    const [offset, setOffset] = useState(210);                      // 1539 тестування останніх\n    const [charEnded, setCharEnded] = useState(false);\n\n    const marvelServise = new MarvelService();\n\n    useEffect(() => {\n        onRequest();                          // викликаєм без значення, в сервісі підставиться дефолтний\n        // eslint-disable-next-line\n    }, [])                                    // [] - запускаєм 1 раз\n\n    const onRequest = (offset) => {           // загрузка і дозагрузка персонажів\n        onCharListLoading();                  // блокуєм кнопку при дозагрузці\n        marvelServise\n            .getAllCharacters(offset)\n            .then(onCharListLoaded)\n            .catch(onError)\n    }\n\n    const onCharListLoading = () => {            // методо - індикатор дозагрузки персонажів , use 4 button off\n        setNewItemLoading(true)\n    }\n\n    const onCharListLoaded = (newcharList) => {\n        let ended = false;\n        if (newcharList.length < 9) {\n            ended = true;\n        }\n\n        setCharList(charList => [...charList, ...newcharList]);  //? розгортаєм старі і дозагружені персонажі\n        setLoading(loading => false);\n        setNewItemLoading(newItemLoading => false);              // включаєм кнопку після дозагрузки \n        setOffset(offset => offset + 9);                         //? зміщуєм діапазон дозагрузки персонажів   \n        setCharEnded(charEnded => ended)\n    }\n\n    const onError = () => {\n        setError(true);\n        setLoading(false);\n    }\n\n    //! Створюю масив для Ref і функцію для добавлення call-back ref\n    const itemRefs = useRef([]);\n\n    const focusOnItem = (id) => {\n        itemRefs.current.forEach(item => item.classList.remove('char__item_selected'));\n        itemRefs.current[id].classList.add('char__item_selected');\n        itemRefs.current[id].focus();\n    }\n\n\n    function renderItems(arr) {\n        const items = arr.map((item, i) => {\n            const checkCover = item.thumbnail.search('not_available') > 0 ? { objectFit: 'unset' } : null;\n            return (\n                <li\n                    className=\"char__item\"\n                    tabIndex={0}\n                    ref={el => itemRefs.current[i] = el}\n                    key={item.key}\n                    onClick={() => {\n                        props.onCharSelected(item.key)\n                        focusOnItem(i)\n                    }}\n                    onKeyPress={(e) => {\n                        if (e.key === ' ' || e.key === \"Enter\") {\n                            props.onCharSelected(item.key);\n                            focusOnItem(i);\n                        }\n                    }}\n                >\n\n                    <img src={item.thumbnail} alt=\"abyss\" style={checkCover} />\n                    <div className=\"char__name\">{item.name}</div>\n                </li>\n            )\n        })\n\n        return (\n            <ul className=\"char__grid\">\n                {items}\n            </ul>\n        )\n    }\n\n    // __________________________________________________________________\n\n\n    const items = renderItems(charList);\n\n    const spinner = loading ? <Spinner /> : null;\n    const errorMassage = error ? <ErrorMessage /> : null;\n    const content = !(loading || error) ? items : null;\n\n    return (\n        <div className=\"char__list\">\n            {spinner}\n            {errorMassage}\n            {content}\n\n            <button\n                className=\"button button__main button__long\"\n                disabled={newItemLoading}\n                style={{ 'display': charEnded ? 'none' : 'block' }}\n                onClick={() => onRequest(offset)}\n            >\n                <div className=\"inner\">load more</div>\n            </button>\n        </div>\n    )\n\n}\n\n//? валідація пропса onCharSelected на тип - функція та наявність в цілому\nCharList.protoTypes = {\n    onCharSelected: PropTypes.func.isRequired\n}\n\nexport default CharList;\n\n\n//! СВІЙ ВАРІАНТ РЕАЛІЗАЦІЇ ПІДСВІТКИ ПІСЛЯ КЛІКУ І УПРАВЛІННЯ ПО ТАБ\n// import { Component } from 'react';\n// import PropTypes from 'prop-types';\n\n// import Spinner from '../spinner/Spinner';\n// import ErrorMessage from '../errorMassage/ErrorMessage';\n// import MarvelService from '../../services/MarvelService';\n// import './charList.scss';\n\n// class CharList extends Component {\n\n//     state = {\n//         charList: [],\n//         loading: true,\n//         error: false,\n//         newItemLoading: false,\n//         offset: 1539,\n//         charEnded: false,\n//         styleSelect: null\n//     }\n\n//     marvelServise = new MarvelService();\n\n//     componentDidMount() {\n//         this.onRequest();                // викликаєм без значення, в сервісі підставиться дефолтний\n//         // window.addEventListener('scroll', this.scrollToEnd)\n//     }\n\n//     //* Скрипт підгрузки персонажів після прокрутки сторінки до кінця\n//     // componentWillUnmount() {\n//     //     window.removeEventListener('scroll', this.scrollToEnd)\n//     // }\n\n//     // scrollToEnd = () => {\n//     //     if (window.pageYOffset + document.documentElement.clientHeight\n//     //         >= document.documentElement.scrollHeight) {\n//     //         this.onRequest(this.state.offset)\n//     //     }\n//     // }\n\n//     onRequest = (offset) => {             // загрузка і дозагрузка персонажів\n//         this.onCharListLoading();         // блокуєм кнопку при дозагрузці\n//         this.marvelServise\n//             .getAllCharacters(offset)\n//             .then(this.onCharListLoaded)\n//             .catch(this.onError)\n//     }\n\n\n//     onCharListLoading = () => {            // методо - індикатор дозагрузки персонажів , use 4 button off\n//         this.setState({\n//             newItemLoading: true\n//         })\n//     }\n\n//     onCharListLoaded = (newcharList) => {\n//         let ended = false;\n//         if (newcharList.length < 9) {\n//             ended = true;\n//         }\n\n//         this.setState(({ offset, charList }) => ({       //? повертаєм обєкт з цієї функції\n//             charList: [...charList, ...newcharList],     //? розгортаєм старі і дозагружені персонажі\n//             loading: false,\n//             newItemLoading: false,                       // включаєм кнопку після дозагрузки \n//             offset: offset + 9,                           //? зміщуєм діапазон дозагрузки персонажів     \n//             charEnded: ended\n//         }))\n//     }\n\n//     onError = () => {\n//         this.setState({\n//             loading: false,\n//             error: true\n//         })\n//     }\n\n//     selectItemStyle = (id) => {\n//         this.setState({\n//             styleSelect: id\n//         })\n//     }\n\n//     renderItems = (arr) => {\n\n//         const items = arr.map((item) => {\n//             let styleSelected = 'char__item ';\n//             if (this.state.styleSelect === item.key) {\n//                 styleSelected += \"char__item_selected\"\n//             }\n\n//             const checkCover = item.thumbnail.search('not_available') > 0 ? { objectFit: 'unset' } : null;\n//             return (\n//                 <li key={item.key}\n\n//                     className={styleSelected}\n//                     onClick={(e) => {\n//                         this.props.onCharSelected(item.key);\n//                         this.selectItemStyle(item.key)\n//                     }}\n//                     onFocus={() => {\n//                         this.selectItemStyle(item.key)\n//                         this.props.onCharSelected(item.key);\n//                     }}>\n\n//                     <img src={item.thumbnail} alt=\"abyss\" style={checkCover} />\n//                     <div className=\"char__name\"\n//                         tabIndex=\"99\">\n//                         {item.name}</div>\n//                 </li>\n//             )\n//         })\n\n//         return (\n//             <ul className=\"char__grid\">\n//                 {items}\n//             </ul>\n//         )\n//     }\n\n//     // __________________________________________________________________\n\n//     render() {\n//         const { charList, loading, error, offset, newItemLoading, charEnded } = this.state;\n\n//         const items = this.renderItems(charList);\n\n//         const spinner = loading ? <Spinner /> : null;\n//         const errorMassage = error ? <ErrorMessage /> : null;\n//         const content = !(loading || error) ? items : null;\n\n//         return (\n//             <div className=\"char__list\">\n//                 {spinner}\n//                 {errorMassage}\n//                 {content}\n\n//                 <button\n//                     className=\"button button__main button__long\"\n//                     disabled={newItemLoading}\n//                     style={{ 'display': charEnded ? 'none' : 'block' }}\n//                     onClick={() => this.onRequest(offset)}\n//                 >\n//                     <div className=\"inner\">load more</div>\n//                 </button>\n//             </div>\n//         )\n//     }\n// }\n\n// // валідація пропса onCharSelected на тип - функція та наявність в цілому\n// CharList.protoTypes = {\n//     onCharSelected: PropTypes.func.isRequired\n// }\n\n// export default CharList;\n\n","import './skeleton.scss';\n\nconst Skeleton = () => {\n    return (\n        <>\n            <p className=\"char__select\">Please select a character to see information</p>\n            <div className=\"skeleton\">\n                <div className=\"pulse skeleton__header\">\n                    <div className=\"pulse skeleton__circle\"></div>\n                    <div className=\"pulse skeleton__mini\"></div>\n                </div>\n                <div className=\"pulse skeleton__block\"></div>\n                <div className=\"pulse skeleton__block\"></div>\n                <div className=\"pulse skeleton__block\"></div>\n            </div>\n        </>\n    )\n}\n\nexport default Skeleton;","import { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\n\nimport MarvelService from '../../services/MarvelService';\nimport Spinner from '../spinner/Spinner';\nimport ErrorMessage from '../errorMassage/ErrorMessage';\nimport Skeleton from '../skeleton/Skeleton';\n\nimport './charInfo.scss';\n\nconst CharInfo = (props) => {\n\n    const [char, setChar] = useState(null);\n    const [loading, setLoading] = useState(false);\n    const [error, setError] = useState(false);\n\n    const marvelServise = new MarvelService();\n\n    useEffect(() => {\n        console.log('useEffect update');\n        updateChar()\n        // eslint-disable-next-line\n    }, [props.charId])\n\n\n    const updateChar = () => {\n        const { charId } = props;\n        if (!charId) {\n            return;\n        }\n\n        onCharLoading();\n\n        marvelServise\n            .getCharacter(charId)\n            .then(onCharLoaded)\n            .catch(onError)\n    }\n\n    const onCharLoaded = (char) => {          //! відповідає за кінцевий результат\n        setChar(char);\n        setLoading(false)\n    }\n\n    const onCharLoading = () => {           //! відповідає за проміжний результат\n        setLoading(true)\n    }\n\n    const onError = () => {\n        setLoading(false);\n        setError(true)\n    }\n\n    // _________________________________________________________\n\n    const skeleton = char || loading || error ? null : <Skeleton />;\n    const errorMassage = error ? <ErrorMessage /> : null;\n    const spinner = loading ? <Spinner /> : null;\n    const content = !(loading || error || !char) ? <View char={char} /> : null;\n\n    return (\n        <div className=\"char__info\" >\n            {skeleton}\n            {errorMassage}\n            {spinner}\n            {content}\n        </div>\n    )\n\n}\n\nconst View = ({ char }) => {\n    const { name, description, thumbnail, homepage, wiki, comics } = char;\n    const checkCover = thumbnail.search('not_available') > 0 ? { objectFit: 'contain' } : null;\n\n    return (\n        <>\n            <div className=\"char__basics\">\n                <img src={thumbnail} alt={name}\n                    style={checkCover} />\n                <div>\n                    <div className=\"char__info-name\">{name}</div>\n                    <div className=\"char__btns\">\n                        <a href={homepage} className=\"button button__main\">\n                            <div className=\"inner\">Homepage</div>\n                        </a>\n                        <a href={wiki} className=\"button button__secondary\">\n                            <div className=\"inner\">Wiki</div>\n                        </a>\n                    </div>\n                </div>\n            </div>\n            <div className=\"char__descr\">\n                {description}\n            </div>\n            <div className=\"char__comics\">Comics:</div>\n            <ul className=\"char__comics-list\">\n\n                {comics.length > 0 ? null : \"There is no comics with this characters\"}\n                {\n                    comics.map((item, i) => {\n                        // eslint-disable-next-line\n                        if (i > 9) return;\n                        return (\n                            <li key={i} className=\"char__comics-item\">\n                                {item.name}\n                            </li>\n                        )\n                    })\n                }\n            </ul>\n        </>\n    )\n}\n\nCharInfo.propTypes = {\n    charId: PropTypes.number\n}\n\nexport default CharInfo;\n\n","import { Component } from \"react\";\r\nimport ErrorMessage from \"../errorMassage/ErrorMessage\";\r\n\r\n\r\nclass ErrorBoundary extends Component {          //! клас запобіжник\r\n    state = {\r\n        error: false\r\n    }\r\n\r\n    // static getDerivedStateFromError(error) {  //! використовуєм якщо потрібно тільки обновити state\r\n    //     return { error: true }\r\n    // }\r\n\r\n    componentDidCatch(error, errorInfo) {\r\n        console.log(error, errorInfo);\r\n        this.setState({\r\n            error: true\r\n        })\r\n    }\r\n\r\n    render() {\r\n        if (this.state.error) {\r\n            return <ErrorMessage />       //! рендеримо повідомлення про помилку\r\n        }\r\n\r\n        return this.props.children;          //! рендеримо компонент якщо все гуд\r\n    }\r\n}\r\n\r\nexport default ErrorBoundary;","export default __webpack_public_path__ + \"static/media/vision.067d4ae1.png\";","import { useState } from \"react\";\nimport AppHeader from \"../appHeader/AppHeader\";\nimport RandomChar from \"../randomChar/RandomChar\";\nimport CharList from \"../charList/CharList\";\nimport CharInfo from \"../charInfo/CharInfo\";\nimport ErrorBoundary from \"../errorBoundary/ErrorBoundary\";\n\nimport decoration from '../../resources/img/vision.png';\n\n\n\nconst App = () => {\n\n    const [selectedChar, setChar] = useState();     //! стейт для підйому id\n\n    const onCharSelected = (id) => {               //! підйом id вибраного перса з CharList\n        setChar(id);\n    }\n\n    return (\n        <div className=\"app\">\n            <AppHeader />\n            <main>\n                <ErrorBoundary>\n                    <RandomChar />\n                </ErrorBoundary>\n                <div className=\"char__content\">\n                    <ErrorBoundary>\n                        <CharList onCharSelected={onCharSelected} />\n                    </ErrorBoundary>\n                    <ErrorBoundary>\n                        <CharInfo charId={selectedChar} />\n                    </ErrorBoundary>\n                </div>\n                <img className=\"bg-decoration\" src={decoration} alt=\"vision\" />\n            </main>\n        </div>\n    )\n}\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/app/App';\n\nimport './style/style.scss';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}