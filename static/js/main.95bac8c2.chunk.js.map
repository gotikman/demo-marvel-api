{"version":3,"sources":["components/appHeader/AppHeader.js","components/spinner/Spinner.js","components/errorMassage/error.gif","components/errorMassage/ErrorMessage.js","services/MarvelService.js","resources/img/mjolnir.png","components/randomChar/RandomChar.js","components/charList/CharList.js","components/skeleton/Skeleton.js","components/charInfo/CharInfo.js","components/errorBoundary/ErrorBoundary.js","resources/img/vision.png","components/app/App.js","index.js"],"names":["AppHeader","className","href","Spinner","xmlns","style","margin","background","display","width","height","viewBox","preserveAspectRatio","transform","cx","cy","r","fill","fillOpacity","attributeName","type","begin","values","keyTimes","dur","repeatCount","ErrorMessage","src","img","objectFit","alt","MarvelService","_apiBase","_apiKey","_baseOffset","getResource","url","a","fetch","res","ok","Error","status","json","getAllCharacters","offset","data","results","map","_transformCharacter","getCharacter","id","char","name","description","slice","thumbnail","path","extension","homepage","urls","wiki","key","comics","items","RandomChar","props","state","loading","error","marvelServise","onCharLoaded","setState","onCharLoading","onError","updateChar","Math","floor","random","then","catch","console","log","this","errorMessage","spinner","content","onClick","mjolnir","Component","View","checkCover","search","CharList","charList","newItemLoading","charEnded","onRequest","onCharListLoading","onCharListLoaded","newcharList","ended","length","itemRefs","setRef","ref","push","focusOnItem","forEach","item","classList","remove","add","focus","renderItems","arr","i","tabIndex","onCharSelected","onKeyPress","e","errorMassage","disabled","protoTypes","PropTypes","func","isRequired","Skeleton","CharInfo","charId","prevProps","skeleton","ErrorBoundary","errorInfo","children","App","selectedChar","decoration","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.95bac8c2.chunk.js","sourcesContent":["import './appHeader.scss';\n\nconst AppHeader = () => {\n    return (\n        <header className=\"app__header\">\n            <h1 className=\"app__title\">\n                <a href=\"#temp\">\n                    <span>Marvel</span> information portal\n                </a>\n            </h1>\n            <nav className=\"app__menu\">\n                <ul>\n                    <li><a href=\"#temp\">Characters</a></li>\n                    /\n                    <li><a href=\"#temp\">Comics</a></li>\n                </ul>\n            </nav>\n        </header>\n    )\n}\n\nexport default AppHeader;","const Spinner = () => {\n    return (\n        <svg xmlns=\"http://www.w3.org/2000/svg\" style={{ margin: '0 auto', background: 'none', display: 'block' }} width=\"200px\" height=\"200px\" viewBox=\"0 0 100 100\" preserveAspectRatio=\"xMidYMid\">\n            <g transform=\"translate(80,50)\">\n                <g transform=\"rotate(0)\">\n                    <circle cx=\"0\" cy=\"0\" r=\"7\" fill=\"#1c4595\" fillOpacity=\"1\">\n                        <animateTransform attributeName=\"transform\" type=\"scale\" begin=\"-0.875s\" values=\"1.5 1.5;1 1\" keyTimes=\"0;1\" dur=\"1s\" repeatCount=\"indefinite\"></animateTransform>\n                        <animate attributeName=\"fillOpacity\" keyTimes=\"0;1\" dur=\"1s\" repeatCount=\"indefinite\" values=\"1;0\" begin=\"-0.875s\"></animate>\n                    </circle>\n                </g>\n            </g><g transform=\"translate(71.21320343559643,71.21320343559643)\">\n                <g transform=\"rotate(45)\">\n                    <circle cx=\"0\" cy=\"0\" r=\"7\" fill=\"#1c4595\" fillOpacity=\"0.875\">\n                        <animateTransform attributeName=\"transform\" type=\"scale\" begin=\"-0.75s\" values=\"1.5 1.5;1 1\" keyTimes=\"0;1\" dur=\"1s\" repeatCount=\"indefinite\"></animateTransform>\n                        <animate attributeName=\"fillOpacity\" keyTimes=\"0;1\" dur=\"1s\" repeatCount=\"indefinite\" values=\"1;0\" begin=\"-0.75s\"></animate>\n                    </circle>\n                </g>\n            </g><g transform=\"translate(50,80)\">\n                <g transform=\"rotate(90)\">\n                    <circle cx=\"0\" cy=\"0\" r=\"7\" fill=\"#1c4595\" fillOpacity=\"0.75\">\n                        <animateTransform attributeName=\"transform\" type=\"scale\" begin=\"-0.625s\" values=\"1.5 1.5;1 1\" keyTimes=\"0;1\" dur=\"1s\" repeatCount=\"indefinite\"></animateTransform>\n                        <animate attributeName=\"fillOpacity\" keyTimes=\"0;1\" dur=\"1s\" repeatCount=\"indefinite\" values=\"1;0\" begin=\"-0.625s\"></animate>\n                    </circle>\n                </g>\n            </g><g transform=\"translate(28.786796564403577,71.21320343559643)\">\n                <g transform=\"rotate(135)\">\n                    <circle cx=\"0\" cy=\"0\" r=\"7\" fill=\"#1c4595\" fillOpacity=\"0.625\">\n                        <animateTransform attributeName=\"transform\" type=\"scale\" begin=\"-0.5s\" values=\"1.5 1.5;1 1\" keyTimes=\"0;1\" dur=\"1s\" repeatCount=\"indefinite\"></animateTransform>\n                        <animate attributeName=\"fillOpacity\" keyTimes=\"0;1\" dur=\"1s\" repeatCount=\"indefinite\" values=\"1;0\" begin=\"-0.5s\"></animate>\n                    </circle>\n                </g>\n            </g><g transform=\"translate(20,50.00000000000001)\">\n                <g transform=\"rotate(180)\">\n                    <circle cx=\"0\" cy=\"0\" r=\"7\" fill=\"#1c4595\" fillOpacity=\"0.5\">\n                        <animateTransform attributeName=\"transform\" type=\"scale\" begin=\"-0.375s\" values=\"1.5 1.5;1 1\" keyTimes=\"0;1\" dur=\"1s\" repeatCount=\"indefinite\"></animateTransform>\n                        <animate attributeName=\"fillOpacity\" keyTimes=\"0;1\" dur=\"1s\" repeatCount=\"indefinite\" values=\"1;0\" begin=\"-0.375s\"></animate>\n                    </circle>\n                </g>\n            </g><g transform=\"translate(28.78679656440357,28.786796564403577)\">\n                <g transform=\"rotate(225)\">\n                    <circle cx=\"0\" cy=\"0\" r=\"7\" fill=\"#1c4595\" fillOpacity=\"0.375\">\n                        <animateTransform attributeName=\"transform\" type=\"scale\" begin=\"-0.25s\" values=\"1.5 1.5;1 1\" keyTimes=\"0;1\" dur=\"1s\" repeatCount=\"indefinite\"></animateTransform>\n                        <animate attributeName=\"fillOpacity\" keyTimes=\"0;1\" dur=\"1s\" repeatCount=\"indefinite\" values=\"1;0\" begin=\"-0.25s\"></animate>\n                    </circle>\n                </g>\n            </g><g transform=\"translate(49.99999999999999,20)\">\n                <g transform=\"rotate(270)\">\n                    <circle cx=\"0\" cy=\"0\" r=\"7\" fill=\"#1c4595\" fillOpacity=\"0.25\">\n                        <animateTransform attributeName=\"transform\" type=\"scale\" begin=\"-0.125s\" values=\"1.5 1.5;1 1\" keyTimes=\"0;1\" dur=\"1s\" repeatCount=\"indefinite\"></animateTransform>\n                        <animate attributeName=\"fillOpacity\" keyTimes=\"0;1\" dur=\"1s\" repeatCount=\"indefinite\" values=\"1;0\" begin=\"-0.125s\"></animate>\n                    </circle>\n                </g>\n            </g><g transform=\"translate(71.21320343559643,28.78679656440357)\">\n                <g transform=\"rotate(315)\">\n                    <circle cx=\"0\" cy=\"0\" r=\"7\" fill=\"#1c4595\" fillOpacity=\"0.125\">\n                        <animateTransform attributeName=\"transform\" type=\"scale\" begin=\"0s\" values=\"1.5 1.5;1 1\" keyTimes=\"0;1\" dur=\"1s\" repeatCount=\"indefinite\"></animateTransform>\n                        <animate attributeName=\"fillOpacity\" keyTimes=\"0;1\" dur=\"1s\" repeatCount=\"indefinite\" values=\"1;0\" begin=\"0s\"></animate>\n                    </circle>\n                </g>\n            </g>\n        </svg>\n    )\n}\n\nexport default Spinner;","export default __webpack_public_path__ + \"static/media/error.42292aa1.gif\";","import img from './error.gif';\r\n\r\nconst ErrorMessage = () => {\r\n    return (\r\n        <img\r\n            src={img}\r\n            style={{ display: 'block', width: \"250px\", height: \"250px\", objectFit: 'contain', margin: \"0 auto\" }}\r\n            alt='Error'\r\n        />\r\n    )\r\n}\r\n\r\nexport default ErrorMessage;","\r\nclass MarvelService {\r\n    _apiBase = 'https://gateway.marvel.com:443/v1/public/';\r\n    _apiKey = 'apikey=663b4a9becd98b0462ce0969a62eb013';\r\n    _baseOffset = 210;\r\n\r\n    getResource = async (url) => {\r\n        let res = await fetch(url);           // чекаєм і отримуєм promise дані по запросу\r\n\r\n        // Обробка ситуації з помилкою в запросі fetch\r\n        if (!res.ok) {\r\n            throw new Error(`Could not fetch ${url}, status: ${res.status}`);\r\n        }\r\n\r\n        return await res.json();                // трансформ. в promise JS обєкт для подальшого викор.\r\n    }\r\n\r\n    getAllCharacters = async (offset = this._baseOffset) => {   // offset по замовчуванню якщо не передається\r\n        const res = await this.getResource(`${this._apiBase}characters?limit=9&offset=${offset}&${this._apiKey}`);\r\n        return res.data.results.map(this._transformCharacter);\r\n    }\r\n\r\n    getCharacter = async (id) => {\r\n        const res = await this.getResource(`${this._apiBase}characters/${id}?${this._apiKey}`);\r\n        return this._transformCharacter(res.data.results[0]);\r\n    }\r\n\r\n    //! метод повертає обєкт від API тільки з потрібними полями\r\n    _transformCharacter = (char) => {\r\n        return {\r\n            name: char.name,\r\n            description: char.description ? `${char.description.slice(0, 210)}...` : 'No data',\r\n            thumbnail: char.thumbnail.path + '.' + char.thumbnail.extension,\r\n            homepage: char.urls[0].url,\r\n            wiki: char.urls[1].url,\r\n            key: char.id,\r\n            comics: char.comics.items\r\n        }\r\n    }\r\n\r\n}\r\n\r\n//! провірка Сервісу http://prntscr.com/22qy9a6\r\n\r\nexport default MarvelService;","export default __webpack_public_path__ + \"static/media/mjolnir.61f31e18.png\";","import { Component } from \"react\";\nimport Spinner from \"../spinner/Spinner\";\nimport ErrorMessage from \"../errorMassage/ErrorMessage\";\nimport MarvelService from \"../../services/MarvelService\";\n\nimport './randomChar.scss';\nimport mjolnir from '../../resources/img/mjolnir.png';\n\nclass RandomChar extends Component {\n    constructor(props) {\n        super(props);\n\n        console.log('constructor');                   //провірка життєвого циклу\n    }\n\n    state = {\n        char: {},\n        loading: true,\n        error: false\n    }\n\n    marvelServise = new MarvelService();                      // властивість  \n\n    // компоненти життєвого циклу\n    componentDidMount() {\n        this.updateChar();                                     //1 ініц. при 1 загруз           \n        console.log('+mount');\n    }\n\n    componentDidUpdate() {\n        console.log('~update');\n    }\n    componentWillUnmount() {\n        // clearInterval(this.timerId)\n        console.log('-unmount');\n    }\n\n    onCharLoaded = (char) => {          //! відповідає за кінцевий результат\n        this.setState({\n            char: char,\n            loading: false\n        })\n    }\n\n    onCharLoading = () => {          //! відповідає за проміжний результат\n        this.setState({\n            loading: true\n        })\n    }\n\n    onError = () => {\n        this.setState({\n            loading: false,\n            error: true\n        })\n    }\n\n    updateChar = () => {\n        const id = Math.floor(Math.random() * (1011400 - 1011000) + 1011000);\n        this.onCharLoading();                  //!Спінер перед запросом та загрузкою перса.\n        this.marvelServise\n            .getCharacter(id)\n            .then(this.onCharLoaded)\n            .catch(this.onError)\n    }\n\n    render() {\n        console.log('render');                                   //провірка життєвого циклу\n        const { char, loading, error } = this.state;\n\n        const errorMessage = error ? <ErrorMessage /> : null;\n        const spinner = loading ? <Spinner /> : null;\n        const content = !(loading || error) ? <View char={char} /> : null;\n\n        return (\n            <div className=\"randomchar\">\n                {errorMessage}\n                {spinner}\n                {content}\n                <div className=\"randomchar__static\">\n                    <p className=\"randomchar__title\">\n                        Random character for today!<br />\n                        Do you want to get to know him better?\n                    </p>\n                    <p className=\"randomchar__title\">\n                        Or choose another one\n                    </p>\n                    <button className=\"button button__main\"\n                        onClick={this.updateChar}>\n                        <div className=\"inner\">try it</div>\n                    </button>\n                    <img src={mjolnir} alt=\"mjolnir\" className=\"randomchar__decoration\" />\n                </div>\n            </div>\n        )\n    }\n}\n\nconst View = ({ char }) => {\n    const { name, description, thumbnail, homepage, wiki } = char;\n\n    const checkCover = thumbnail.search('not_available') > 0 ? { objectFit: 'contain' } : null;\n\n    return (\n        <div className=\"randomchar__block\">\n            <img src={thumbnail} alt=\"Random character\" className=\"randomchar__img\"\n                style={checkCover} />\n            <div className=\"randomchar__info\">\n                <p className=\"randomchar__name\">{name}</p>\n                <p className=\"randomchar__descr\">{description}\n                </p>\n                <div className=\"randomchar__btns\">\n                    <a href={homepage} className=\"button button__main\">\n                        <div className=\"inner\">homepage</div>\n                    </a>\n                    <a href={wiki} className=\"button button__secondary\">\n                        <div className=\"inner\">Wiki</div>\n                    </a>\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default RandomChar;","import { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nimport Spinner from '../spinner/Spinner';\nimport ErrorMessage from '../errorMassage/ErrorMessage';\nimport MarvelService from '../../services/MarvelService';\nimport './charList.scss';\n\nclass CharList extends Component {\n\n    state = {\n        charList: [],\n        loading: true,\n        error: false,\n        newItemLoading: false,\n        offset: 210,                     // 1539 тестування останніх\n        charEnded: false\n    }\n\n    marvelServise = new MarvelService();\n\n    componentDidMount() {\n        this.onRequest();                // викликаєм без значення, в сервісі підставиться дефолтний\n        // window.addEventListener('scroll', this.scrollToEnd)\n    }\n\n    //* Скрипт підгрузки персонажів після прокрутки сторінки до кінця\n    // componentWillUnmount() {\n    //     window.removeEventListener('scroll', this.scrollToEnd)\n    // }\n\n    // scrollToEnd = () => {\n    //     if (window.pageYOffset + document.documentElement.clientHeight\n    //         >= document.documentElement.scrollHeight) {\n    //         this.onRequest(this.state.offset)\n    //     }\n    // }\n\n    onRequest = (offset) => {             // загрузка і дозагрузка персонажів\n        this.onCharListLoading();         // блокуєм кнопку при дозагрузці\n        this.marvelServise\n            .getAllCharacters(offset)\n            .then(this.onCharListLoaded)\n            .catch(this.onError)\n    }\n\n\n    onCharListLoading = () => {            // методо - індикатор дозагрузки персонажів , use 4 button off\n        this.setState({\n            newItemLoading: true\n        })\n    }\n\n    onCharListLoaded = (newcharList) => {\n        let ended = false;\n        if (newcharList.length < 9) {\n            ended = true;\n        }\n\n        this.setState(({ offset, charList }) => ({       //? повертаєм обєкт з цієї функції\n            charList: [...charList, ...newcharList],     //? розгортаєм старі і дозагружені персонажі\n            loading: false,\n            newItemLoading: false,                       // включаєм кнопку після дозагрузки \n            offset: offset + 9,                           //? зміщуєм діапазон дозагрузки персонажів     \n            charEnded: ended\n        }))\n    }\n\n    onError = () => {\n        this.setState({\n            loading: false,\n            error: true\n        })\n    }\n\n    //! Створюю масив для Ref і функцію для добавлення call-back ref\n    itemRefs = [];\n    setRef = (ref) => {\n        this.itemRefs.push(ref);\n    }\n\n    focusOnItem = (id) => {\n        this.itemRefs.forEach(item => item.classList.remove('char__item_selected'));\n        this.itemRefs[id].classList.add('char__item_selected');\n        this.itemRefs[id].focus();\n    }\n\n\n    renderItems = (arr) => {\n        const items = arr.map((item, i) => {\n            const checkCover = item.thumbnail.search('not_available') > 0 ? { objectFit: 'unset' } : null;\n            return (\n                <li\n                    className=\"char__item\"\n                    tabIndex={0}\n                    ref={this.setRef}\n                    key={item.key}\n                    onClick={() => {\n                        this.props.onCharSelected(item.key)\n                        this.focusOnItem(i)\n                    }}\n                    onKeyPress={(e) => {\n                        if (e.key === ' ' || e.key === \"Enter\") {\n                            this.props.onCharSelected(item.key);\n                            this.focusOnItem(i);\n                        }\n                    }}\n                >\n\n                    <img src={item.thumbnail} alt=\"abyss\" style={checkCover} />\n                    <div className=\"char__name\">{item.name}</div>\n                </li>\n            )\n        })\n\n        return (\n            <ul className=\"char__grid\">\n                {items}\n            </ul>\n        )\n    }\n\n    // __________________________________________________________________\n\n    render() {\n        const { charList, loading, error, offset, newItemLoading, charEnded } = this.state;\n\n        const items = this.renderItems(charList);\n\n        const spinner = loading ? <Spinner /> : null;\n        const errorMassage = error ? <ErrorMessage /> : null;\n        const content = !(loading || error) ? items : null;\n\n        return (\n            <div className=\"char__list\">\n                {spinner}\n                {errorMassage}\n                {content}\n\n                <button\n                    className=\"button button__main button__long\"\n                    disabled={newItemLoading}\n                    style={{ 'display': charEnded ? 'none' : 'block' }}\n                    onClick={() => this.onRequest(offset)}\n                >\n                    <div className=\"inner\">load more</div>\n                </button>\n            </div>\n        )\n    }\n}\n\n// валідація пропса onCharSelected на тип - функція та наявність в цілому\nCharList.protoTypes = {\n    onCharSelected: PropTypes.func.isRequired\n}\n\nexport default CharList;\n\n\n//! СВІЙ ВАРІАНТ РЕАЛІЗАЦІЇ ПІДСВІТКИ ПІСЛЯ КЛІКУ І УПРАВЛІННЯ ПО ТАБ\n// import { Component } from 'react';\n// import PropTypes from 'prop-types';\n\n// import Spinner from '../spinner/Spinner';\n// import ErrorMessage from '../errorMassage/ErrorMessage';\n// import MarvelService from '../../services/MarvelService';\n// import './charList.scss';\n\n// class CharList extends Component {\n\n//     state = {\n//         charList: [],\n//         loading: true,\n//         error: false,\n//         newItemLoading: false,\n//         offset: 1539,\n//         charEnded: false,\n//         styleSelect: null\n//     }\n\n//     marvelServise = new MarvelService();\n\n//     componentDidMount() {\n//         this.onRequest();                // викликаєм без значення, в сервісі підставиться дефолтний\n//         // window.addEventListener('scroll', this.scrollToEnd)\n//     }\n\n//     //* Скрипт підгрузки персонажів після прокрутки сторінки до кінця\n//     // componentWillUnmount() {\n//     //     window.removeEventListener('scroll', this.scrollToEnd)\n//     // }\n\n//     // scrollToEnd = () => {\n//     //     if (window.pageYOffset + document.documentElement.clientHeight\n//     //         >= document.documentElement.scrollHeight) {\n//     //         this.onRequest(this.state.offset)\n//     //     }\n//     // }\n\n//     onRequest = (offset) => {             // загрузка і дозагрузка персонажів\n//         this.onCharListLoading();         // блокуєм кнопку при дозагрузці\n//         this.marvelServise\n//             .getAllCharacters(offset)\n//             .then(this.onCharListLoaded)\n//             .catch(this.onError)\n//     }\n\n\n//     onCharListLoading = () => {            // методо - індикатор дозагрузки персонажів , use 4 button off\n//         this.setState({\n//             newItemLoading: true\n//         })\n//     }\n\n//     onCharListLoaded = (newcharList) => {\n//         let ended = false;\n//         if (newcharList.length < 9) {\n//             ended = true;\n//         }\n\n//         this.setState(({ offset, charList }) => ({       //? повертаєм обєкт з цієї функції\n//             charList: [...charList, ...newcharList],     //? розгортаєм старі і дозагружені персонажі\n//             loading: false,\n//             newItemLoading: false,                       // включаєм кнопку після дозагрузки \n//             offset: offset + 9,                           //? зміщуєм діапазон дозагрузки персонажів     \n//             charEnded: ended\n//         }))\n//     }\n\n//     onError = () => {\n//         this.setState({\n//             loading: false,\n//             error: true\n//         })\n//     }\n\n//     selectItemStyle = (id) => {\n//         this.setState({\n//             styleSelect: id\n//         })\n//     }\n\n//     renderItems = (arr) => {\n\n//         const items = arr.map((item) => {\n//             let styleSelected = 'char__item ';\n//             if (this.state.styleSelect === item.key) {\n//                 styleSelected += \"char__item_selected\"\n//             }\n\n//             const checkCover = item.thumbnail.search('not_available') > 0 ? { objectFit: 'unset' } : null;\n//             return (\n//                 <li key={item.key}\n\n//                     className={styleSelected}\n//                     onClick={(e) => {\n//                         this.props.onCharSelected(item.key);\n//                         this.selectItemStyle(item.key)\n//                     }}\n//                     onFocus={() => {\n//                         this.selectItemStyle(item.key)\n//                         this.props.onCharSelected(item.key);\n//                     }}>\n\n//                     <img src={item.thumbnail} alt=\"abyss\" style={checkCover} />\n//                     <div className=\"char__name\"\n//                         tabIndex=\"99\">\n//                         {item.name}</div>\n//                 </li>\n//             )\n//         })\n\n//         return (\n//             <ul className=\"char__grid\">\n//                 {items}\n//             </ul>\n//         )\n//     }\n\n//     // __________________________________________________________________\n\n//     render() {\n//         const { charList, loading, error, offset, newItemLoading, charEnded } = this.state;\n\n//         const items = this.renderItems(charList);\n\n//         const spinner = loading ? <Spinner /> : null;\n//         const errorMassage = error ? <ErrorMessage /> : null;\n//         const content = !(loading || error) ? items : null;\n\n//         return (\n//             <div className=\"char__list\">\n//                 {spinner}\n//                 {errorMassage}\n//                 {content}\n\n//                 <button\n//                     className=\"button button__main button__long\"\n//                     disabled={newItemLoading}\n//                     style={{ 'display': charEnded ? 'none' : 'block' }}\n//                     onClick={() => this.onRequest(offset)}\n//                 >\n//                     <div className=\"inner\">load more</div>\n//                 </button>\n//             </div>\n//         )\n//     }\n// }\n\n// // валідація пропса onCharSelected на тип - функція та наявність в цілому\n// CharList.protoTypes = {\n//     onCharSelected: PropTypes.func.isRequired\n// }\n\n// export default CharList;\n\n","import './skeleton.scss';\n\nconst Skeleton = () => {\n    return (\n        <>\n            <p className=\"char__select\">Please select a character to see information</p>\n            <div className=\"skeleton\">\n                <div className=\"pulse skeleton__header\">\n                    <div className=\"pulse skeleton__circle\"></div>\n                    <div className=\"pulse skeleton__mini\"></div>\n                </div>\n                <div className=\"pulse skeleton__block\"></div>\n                <div className=\"pulse skeleton__block\"></div>\n                <div className=\"pulse skeleton__block\"></div>\n            </div>\n        </>\n    )\n}\n\nexport default Skeleton;","import { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nimport MarvelService from '../../services/MarvelService';\nimport Spinner from '../spinner/Spinner';\nimport ErrorMessage from '../errorMassage/ErrorMessage';\nimport Skeleton from '../skeleton/Skeleton';\n\nimport './charInfo.scss';\n// import thor from '../../resources/img/thor.jpeg';\n\nclass CharInfo extends Component {\n\n    state = {\n        char: null,\n        loading: false,\n        error: false\n    }\n\n    marvelServise = new MarvelService();\n\n    componentDidMount() {\n        this.updateChar();\n    }\n\n    componentDidUpdate(prevProps) {        //! має 2 аргумента проп і стейт для порівняння\n        if (this.props.charId !== prevProps.charId) {\n            this.updateChar();\n        }\n    }\n\n\n    updateChar = () => {\n        const { charId } = this.props;\n        if (!charId) {\n            return;\n        }\n\n        this.onCharLoading();\n\n        this.marvelServise\n            .getCharacter(charId)\n            .then(this.onCharLoaded)\n            .catch(this.onError)\n\n    }\n\n    onCharLoaded = (char) => {          //! відповідає за кінцевий результат\n        this.setState({\n            char: char,\n            loading: false\n        })\n    }\n\n    onCharLoading = () => {           //! відповідає за проміжний результат\n        this.setState({\n            loading: true\n        })\n    }\n\n    onError = () => {\n        this.setState({\n            loading: false,\n            error: true\n        })\n    }\n\n    // _________________________________________________________\n\n    render() {\n        const { char, loading, error } = this.state;\n\n        const skeleton = char || loading || error ? null : <Skeleton />;\n        const errorMassage = error ? <ErrorMessage /> : null;\n        const spinner = loading ? <Spinner /> : null;\n        const content = !(loading || error || !char) ? <View char={char} /> : null;\n\n        return (\n            <div className=\"char__info\" >\n                {skeleton}\n                {errorMassage}\n                {spinner}\n                {content}\n            </div>\n        )\n    }\n}\n\nconst View = ({ char }) => {\n    const { name, description, thumbnail, homepage, wiki, comics } = char;\n    const checkCover = thumbnail.search('not_available') > 0 ? { objectFit: 'contain' } : null;\n\n    return (\n        <>\n            <div className=\"char__basics\">\n                <img src={thumbnail} alt={name}\n                    style={checkCover} />\n                <div>\n                    <div className=\"char__info-name\">{name}</div>\n                    <div className=\"char__btns\">\n                        <a href={homepage} className=\"button button__main\">\n                            <div className=\"inner\">Homepage</div>\n                        </a>\n                        <a href={wiki} className=\"button button__secondary\">\n                            <div className=\"inner\">Wiki</div>\n                        </a>\n                    </div>\n                </div>\n            </div>\n            <div className=\"char__descr\">\n                {description}\n            </div>\n            <div className=\"char__comics\">Comics:</div>\n            <ul className=\"char__comics-list\">\n\n                {comics.length > 0 ? null : \"There is no comics with this characters\"}\n                {\n                    comics.map((item, i) => {\n                        // eslint-disable-next-line\n                        if (i > 9) return;\n                        return (\n                            <li key={i} className=\"char__comics-item\">\n                                {item.name}\n                            </li>\n                        )\n                    })\n                }\n            </ul>\n        </>\n    )\n}\n\nCharInfo.propTypes = {\n    charId: PropTypes.number\n}\n\nexport default CharInfo;","import { Component } from \"react\";\r\nimport ErrorMessage from \"../errorMassage/ErrorMessage\";\r\n\r\n\r\nclass ErrorBoundary extends Component {          //! клас запобіжник\r\n    state = {\r\n        error: false\r\n    }\r\n\r\n    // static getDerivedStateFromError(error) {  //! використовуєм якщо потрібно тільки обновити state\r\n    //     return { error: true }\r\n    // }\r\n\r\n    componentDidCatch(error, errorInfo) {\r\n        console.log(error, errorInfo);\r\n        this.setState({\r\n            error: true\r\n        })\r\n    }\r\n\r\n    render() {\r\n        if (this.state.error) {\r\n            return <ErrorMessage />       //! рендеримо повідомлення про помилку\r\n        }\r\n\r\n        return this.props.children;          //! рендеримо компонент якщо все гуд\r\n    }\r\n}\r\n\r\nexport default ErrorBoundary;","export default __webpack_public_path__ + \"static/media/vision.067d4ae1.png\";","import { Component } from \"react\";\nimport AppHeader from \"../appHeader/AppHeader\";\nimport RandomChar from \"../randomChar/RandomChar\";\nimport CharList from \"../charList/CharList\";\nimport CharInfo from \"../charInfo/CharInfo\";\nimport ErrorBoundary from \"../errorBoundary/ErrorBoundary\";\n\nimport decoration from '../../resources/img/vision.png';\n\n\n\nclass App extends Component {\n\n    state = {\n        selectedChar: null,          //! стейт для підйому id\n\n    }\n\n    onCharSelected = (id) => {         //! підйом id вибраного перса з CharList\n        this.setState({\n            selectedChar: id\n        })\n    }\n\n    render() {\n        return (\n            <div className=\"app\">\n                <AppHeader />\n                <main>\n                    <ErrorBoundary>\n                        <RandomChar />\n                    </ErrorBoundary>\n                    <div className=\"char__content\">\n                        <ErrorBoundary>\n                            <CharList onCharSelected={this.onCharSelected} />\n                        </ErrorBoundary>\n                        <ErrorBoundary>\n                            <CharInfo charId={this.state.selectedChar} />\n                        </ErrorBoundary>\n                    </div>\n                    <img className=\"bg-decoration\" src={decoration} alt=\"vision\" />\n                </main>\n            </div>\n        )\n    }\n}\n\n\n\n//! кнопка з вкл/викл компонента\n// class App extends Component {\n//     state = {\n//         showRandomChar: true\n//     }\n\n//     toggleRandomChar = () => {\n//         this.setState(({ showRandomChar }) => {\n//             return {\n//                 showRandomChar: !showRandomChar\n//             }\n//         })\n//     }\n\n//     render() {\n//         return (\n//             <div className=\"app\">\n//                 <AppHeader />\n//                 <main>\n//                     {this.state.showRandomChar ? <RandomChar /> : null}\n\n//                     <button onClick={this.toggleRandomChar}>click</button>\n//                     <div className=\"char__content\">\n//                         <CharList />\n//                         <CharInfo />\n//                     </div>\n//                     <img className=\"bg-decoration\" src={decoration} alt=\"vision\" />\n//                 </main>\n//             </div>\n//         )\n//     }\n// }\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/app/App';\n\nimport './style/style.scss';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}